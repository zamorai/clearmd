-- Users table for authentication and profile management
create table public.users (
  id uuid references auth.users on delete cascade primary key,
  full_name text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Specialties table to store medical specialties
create table public.specialties (
  id uuid default uuid_generate_v4() primary key,
  name text not null unique,
  color text, -- For UI color coding
  icon text, -- For UI icons
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Subspecialties table
create table public.subspecialties (
  id uuid default uuid_generate_v4() primary key,
  specialty_id uuid references public.specialties on delete cascade,
  name text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(specialty_id, name)
);

-- Locations table for standardizing location data
create table public.locations (
  id uuid default uuid_generate_v4() primary key,
  city text not null,
  state text not null,
  country text not null default 'USA',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(city, state, country)
);

-- Employment categories table
create table public.employment_categories (
  id uuid default uuid_generate_v4() primary key,
  name text not null unique check (name in ('academia', 'hospital', 'private_practice', 'research')),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Positions table to store standardized position titles
create table public.positions (
  id uuid default uuid_generate_v4() primary key,
  category_id uuid references public.employment_categories on delete cascade,
  title text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(category_id, title)
);

-- Main salary entries table
create table public.salaries (
  id uuid default uuid_generate_v4() primary key,
  user_id uuid references public.users on delete set null,
  specialty_id uuid references public.specialties not null,
  subspecialty_id uuid references public.subspecialties,
  location_id uuid references public.locations not null,
  position_id uuid references public.positions not null,
  category_id uuid references public.employment_categories not null,
  base_salary numeric not null check (base_salary >= 0),
  bonus numeric check (bonus >= 0),
  other_compensation numeric check (other_compensation >= 0),
  total_compensation numeric generated always as (base_salary + coalesce(bonus, 0) + coalesce(other_compensation, 0)) stored,
  years_experience numeric not null check (years_experience >= 0),
  hours_worked_weekly numeric check (hours_worked_weekly > 0 and hours_worked_weekly <= 168),
  gender text check (gender in ('male', 'female', 'other', 'prefer_not_to_say')),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- View for aggregated statistics by specialty
create view public.specialty_stats as
select 
  s.specialty_id,
  sp.name as specialty_name,
  count(*) as total_entries,
  round(avg(s.total_compensation)) as avg_total_comp,
  round(avg(s.years_experience)) as avg_years_experience,
  round(avg(s.hours_worked_weekly)) as avg_hours_worked,
  count(case when s.gender = 'male' then 1 end) as male_count,
  count(case when s.gender = 'female' then 1 end) as female_count,
  mode() within group (order by s.location_id) as most_common_location_id
from public.salaries s
join public.specialties sp on s.specialty_id = sp.id
group by s.specialty_id, sp.name;

-- View for aggregated statistics by category
create view public.category_stats as
select 
  s.category_id,
  ec.name as category_name,
  count(*) as total_entries,
  round(avg(s.total_compensation)) as avg_total_comp,
  round(avg(s.years_experience)) as avg_years_experience,
  round(avg(s.hours_worked_weekly)) as avg_hours_worked
from public.salaries s
join public.employment_categories ec on s.category_id = ec.id
group by s.category_id, ec.name;

-- RLS Policies
alter table public.salaries enable row level security;

-- Allow anyone to read salary data
create policy "Anyone can read salaries"
  on public.salaries for select
  using (true);

-- Only allow users to insert their own salary data
create policy "Users can insert their own salary data"
  on public.salaries for insert
  with check (auth.uid() = user_id);

-- Only allow users to update their own salary data
create policy "Users can update their own salary data"
  on public.salaries for update
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);