
// AggregatedCompensationView.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const AggregatedCompensationView: React.FC = () => {
  const [specialties, setSpecialties] = useState<string[]>([]);
  const [selectedSpecialty, setSelectedSpecialty] = useState<string>('');
  const [aggregatedData, setAggregatedData] = useState<any>(null);

  useEffect(() => {
    fetchSpecialties();
  }, []);

  useEffect(() => {
    if (selectedSpecialty) {
      fetchAggregatedData();
    }
  }, [selectedSpecialty]);

  const fetchSpecialties = async () => {
    const { data, error } = await supabase
      .from('salaries')
      .select('specialty')
      .not('specialty', 'is', null)
      .then(result => {
        // Get unique values using a Set
        const uniqueSpecialties = [...new Set(result.data?.map(item => item.specialty))].sort();
        return { data: uniqueSpecialties, error: result.error };
      });
    
    if (error) {
      console.error('Error fetching specialties:', error);
    } else {
      setSpecialties(data || []);
    }
  };

  const fetchAggregatedData = async () => {
    const { data, error } = await supabase
      .from('salaries')
      .select('*')
      .eq('specialty', selectedSpecialty);
    
    if (error) {
      console.error('Error fetching aggregated data:', error);
    } else {
      processAggregatedData(data);
    }
  };

  const processAggregatedData = (data) => {
    const categories = ['academia', 'hospital', 'private_practice', 'research'];
    const processed = {
      averageSalaries: [],
      experienceData: [],
      locationData: {},
      detailedData: data,
    };

    categories.forEach(category => {
      const categoryData = data.filter(item => item.category === category);
      const avgSalary = categoryData.reduce((sum, item) => sum + item.salary, 0) / categoryData.length;
      processed.averageSalaries.push({ category, avgSalary });

      const expData = categoryData.map(item => ({ years: item.years_experience, salary: item.salary }));
      processed.experienceData.push({ category, data: expData });

      const locations = categoryData.reduce((acc, item) => {
        acc[item.location] = (acc[item.location] || 0) + 1;
        return acc;
      }, {});
      processed.locationData[category] = locations;
    });

    setAggregatedData(processed);
  };

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-8">Aggregated Compensation Data</h1>
      
      <div className="mb-8">
        <Menu as="div" className="relative inline-block text-left">
          <Menu.Button className="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500">
            {selectedSpecialty || 'Select Specialty'}
            <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
          </Menu.Button>
          <Menu.Items className="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
            <div className="py-1">
              {specialties.map((specialty) => (
                <Menu.Item key={specialty}>
                  {({ active }) => (
                    <a
                      href="#"
                      className={`${
                        active ? 'bg-gray-100 text-gray-900' : 'text-gray-700'
                      } block px-4 py-2 text-sm`}
                      onClick={() => setSelectedSpecialty(specialty)}
                    >
                      {specialty}
                    </a>
                  )}
                </Menu.Item>
              ))}
            </div>
          </Menu.Items>
        </Menu>
      </div>

      {aggregatedData && (
        <>
          <div className="mb-8">
            <h2 className="text-2xl font-semibold mb-4">Average Salaries by Category</h2>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={aggregatedData.averageSalaries}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="category" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="avgSalary" fill="#8884d8" />
              </BarChart>
            </ResponsiveContainer>
          </div>

          <div className="mb-8">
            <h2 className="text-2xl font-semibold mb-4">Salary vs. Years of Experience</h2>
            <ResponsiveContainer width="100%" height={400}>
              <BarChart data={aggregatedData.experienceData.flatMap(cat => cat.data)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="years" label={{ value: 'Years of Experience', position: 'insideBottom', offset: -5 }} />
                <YAxis label={{ value: 'Salary', angle: -90, position: 'insideLeft' }} />
                <Tooltip />
                <Legend />
                <Bar dataKey="salary" fill="#82ca9d" />
              </BarChart>
            </ResponsiveContainer>
          </div>

          <div className="mb-8">
            <h2 className="text-2xl font-semibold mb-4">Top Locations by Category</h2>
            {Object.entries(aggregatedData.locationData).map(([category, locations]) => (
              <div key={category} className="mb-4">
                <h3 className="text-xl font-medium mb-2">{category}</h3>
                <ul className="list-disc pl-5">
                  {Object.entries(locations as Record<string, number>)
                    .sort(([, a], [, b]) => b - a)
                    .slice(0, 3)
                    .map(([location, count]) => (
                      <li key={location}>{location}: {count} entries</li>
                    ))}
                </ul>
              </div>
            ))}
          </div>

          <div>
            <h2 className="text-2xl font-semibold mb-4">Detailed Salary Data</h2>
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Position</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Salary</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Years of Experience</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {aggregatedData.detailedData.map((item, index) => (
                  <tr key={index}>
                    <td className="px-6 py-4 whitespace-nowrap">{item.category}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{item.position}</td>
                    <td className="px-6 py-4 whitespace-nowrap">${item.salary.toLocaleString()}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{item.location}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{item.years_experience}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}
    </div>
  );
};

export default AggregatedCompensationView;

// CallToAction.tsx

'use client';

import React from 'react';
import Link from 'next/link';

const CallToAction: React.FC = () => {
  return (
    <div className="bg-deep-blue text-white py-16">
      <div className="container mx-auto text-center">
        <h2 className="text-3xl font-bold mb-4">Contribute to Salary Transparency</h2>
        <p className="text-xl mb-8">Help others by sharing your salary information anonymously</p>
        <div className="space-x-4">
          <Link
            href="/add-salary"
            className="bg-vibrant-teal text-white px-6 py-3 rounded-md text-lg font-semibold hover:bg-teal-600 transition duration-300"
          >
            Add Your Salary
          </Link>
          <Link
            href="/newsletter"
            className="bg-white text-deep-blue px-6 py-3 rounded-md text-lg font-semibold hover:bg-gray-100 transition duration-300"
          >
            Subscribe to Newsletter
          </Link>
        </div>
      </div>
    </div>
  );
};

export default CallToAction;

// DetailedCompensationView.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import SummarySection from './SummarySection';
import FilterDropdowns from './FilterDropdowns';
import SalaryTable from './SalaryTable';

interface DetailedCompensationViewProps {
  category: 'academia' | 'hospital' | 'private_practice' | 'research' | 'total';
}

const DetailedCompensationView: React.FC<DetailedCompensationViewProps> = ({ category }) => {
  const [summaryData, setSummaryData] = useState(null);
  const [salaryData, setSalaryData] = useState([]);
  const [filters, setFilters] = useState({
    specialty: '',
    subspecialty: '',
    location: '',
    position: '',
  });

  useEffect(() => {
    fetchData();
  }, [category, filters]);

  const fetchData = async () => {
    // Fetch summary data
    const { data: summaryData, error: summaryError } = await supabase
      .from('salary_summaries')
      .select('*')
      .eq('category', category)
      .single();

    if (summaryError) {
      console.error('Error fetching summary data:', summaryError);
    } else {
      setSummaryData(summaryData);
    }

    // Fetch detailed salary data
    let query = supabase
      .from('salaries')
      .select('*')
      .eq('category', category);

    // Apply filters
    if (filters.specialty) query = query.eq('specialty', filters.specialty);
    if (filters.subspecialty) query = query.eq('subspecialty', filters.subspecialty);
    if (filters.location) query = query.eq('location', filters.location);
    if (filters.position) query = query.eq('position', filters.position);

    const { data: salaryData, error: salaryError } = await query;

    if (salaryError) {
      console.error('Error fetching salary data:', salaryError);
    } else {
      setSalaryData(salaryData);
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
  };

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-8">{category.charAt(0).toUpperCase() + category.slice(1)} Compensation Data</h1>
      <SummarySection data={summaryData} />
      <FilterDropdowns filters={filters} onFilterChange={handleFilterChange} />
      <SalaryTable data={salaryData} />
    </div>
  );
};

export default DetailedCompensationView;

// FilterDropdowns.tsx

import React from 'react';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';

interface FilterDropdownsProps {
  filters: {
    specialty: string;
    subspecialty: string;
    location: string;
    position: string;
  };
  onFilterChange: (newFilters: any) => void;
}

const FilterDropdowns: React.FC<FilterDropdownsProps> = ({ filters, onFilterChange }) => {
  // Mock data for dropdowns - replace with actual data fetched from your backend
  const specialties = ['Cardiology', 'Neurology', 'Oncology'];
  const subspecialties = ['Interventional Cardiology', 'Neurosurgery', 'Medical Oncology'];
  const locations = ['New York', 'California', 'Texas'];
  const positions = ['Professor', 'Associate Professor', 'Assistant Professor'];

  const handleFilterSelect = (filterType: string, value: string) => {
    onFilterChange({ ...filters, [filterType]: value });
  };

  return (
    <div className="flex flex-wrap gap-4 mb-8">
      <FilterDropdown
        label="Specialty"
        options={specialties}
        selected={filters.specialty}
        onSelect={(value) => handleFilterSelect('specialty', value)}
      />
      <FilterDropdown
        label="Subspecialty"
        options={subspecialties}
        selected={filters.subspecialty}
        onSelect={(value) => handleFilterSelect('subspecialty', value)}
      />
      <FilterDropdown
        label="Location"
        options={locations}
        selected={filters.location}
        onSelect={(value) => handleFilterSelect('location', value)}
      />
      <FilterDropdown
        label="Position"
        options={positions}
        selected={filters.position}
        onSelect={(value) => handleFilterSelect('position', value)}
      />
    </div>
  );
};

const FilterDropdown: React.FC<{
  label: string;
  options: string[];
  selected: string;
  onSelect: (value: string) => void;
}> = ({ label, options, selected, onSelect }) => {
  return (
    <Menu as="div" className="relative inline-block text-left">
      <Menu.Button className="inline-flex justify-between items-center w-48 rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-vibrant-teal">
        {selected || label}
        <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
      </Menu.Button>
      <Menu.Items className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
        <div className="py-1">
          {options.map((option) => (
            <Menu.Item key={option}>
              {({ active }) => (
                <button
                  onClick={() => onSelect(option)}
                  className={`${
                    active ? 'bg-gray-100 text-gray-900' : 'text-gray-700'
                  } block px-4 py-2 text-sm w-full text-left`}
                >
                  {option}
                </button>
              )}
            </Menu.Item>
          ))}
        </div>
      </Menu.Items>
    </Menu>
  );
};

export default FilterDropdowns;

// HeroSection.tsx

'use client';

import React from 'react';
import Link from 'next/link';

const HeroSection: React.FC = () => {
  return (
    <div className="bg-deep-blue text-white py-20">
      <div className="container mx-auto text-center">
        <h1 className="text-4xl font-bold mb-4">Bringing Transparency to Medical Salaries</h1>
        <p className="text-xl mb-8">Compare salaries across specialties and locations</p>
        <Link
          href="/compare"
          className="bg-vibrant-teal text-white px-6 py-3 rounded-md text-lg font-semibold hover:bg-teal-600 transition duration-300"
        >
          Compare Salaries
        </Link>
      </div>
    </div>
  );
};

export default HeroSection;

// SalaryComparison.tsx

'use client';

import React, { useState } from 'react';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';

const specialties = ['Cardiology', 'Orthopedics', 'Neurology', 'Pediatrics'];
const subspecialties = {
  Cardiology: ['Interventional', 'Electrophysiology', 'Heart Failure'],
  Orthopedics: ['Sports Medicine', 'Spine', 'Joint Reconstruction'],
  Neurology: ['Stroke', 'Epilepsy', 'Movement Disorders'],
  Pediatrics: ['Neonatology', 'Pediatric Cardiology', 'Pediatric Oncology'],
};

const locations = ['New York City', 'Los Angeles', 'Chicago', 'Houston'];

const categories = ['Academia', 'Research', 'Private Clinic', 'Hospital'];

const SalaryComparison: React.FC = () => {
  const [selectedSpecialty, setSelectedSpecialty] = useState(specialties[0]);
  const [selectedSubspecialty, setSelectedSubspecialty] = useState('');
  const [selectedLocation, setSelectedLocation] = useState(locations[0]);

  return (
    <div className="bg-white py-12">
      <div className="container mx-auto">
        <h2 className="text-2xl font-bold mb-6 text-center">Salary Comparison</h2>
        <div className="flex justify-center space-x-4 mb-8">
          <DropdownMenu
            options={specialties}
            selected={selectedSpecialty}
            onSelect={setSelectedSpecialty}
            label="Specialty"
          />
          <DropdownMenu
            options={subspecialties[selectedSpecialty]}
            selected={selectedSubspecialty}
            onSelect={setSelectedSubspecialty}
            label="Subspecialty"
          />
          <DropdownMenu
            options={locations}
            selected={selectedLocation}
            onSelect={setSelectedLocation}
            label="Location"
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {categories.map((category) => (
            <CategoryColumn key={category} category={category} />
          ))}
        </div>
      </div>
    </div>
  );
};

const DropdownMenu: React.FC<{
  options: string[];
  selected: string;
  onSelect: (option: string) => void;
  label: string;
}> = ({ options, selected, onSelect, label }) => (
  <Menu as="div" className="relative inline-block text-left">
    <Menu.Button className="inline-flex justify-between items-center w-48 rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-vibrant-teal">
      {selected || label}
      <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
    </Menu.Button>
    <Menu.Items className="absolute z-10 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
      <div className="py-1">
        {options.map((option) => (
          <Menu.Item key={option}>
            {({ active }) => (
              <button
                onClick={() => onSelect(option)}
                className={`${
                  active ? 'bg-gray-100 text-gray-900' : 'text-gray-700'
                } block px-4 py-2 text-sm w-full text-left`}
              >
                {option}
              </button>
            )}
          </Menu.Item>
        ))}
      </div>
    </Menu.Items>
  </Menu>
);

const CategoryColumn: React.FC<{ category: string }> = ({ category }) => (
  <div className="bg-soft-gray p-6 rounded-lg shadow-sm">
    <h3 className="text-lg font-semibold mb-4">{category}</h3>
    <div className="space-y-2">
      {['Entry Level', 'Mid Level', 'Senior Level'].map((level) => (
        <button
          key={level}
          className="w-full text-left p-2 bg-white rounded-md shadow-sm hover:shadow-md transition duration-300"
        >
          {level}
        </button>
      ))}
    </div>
  </div>
);

export default SalaryComparison;

// SalaryTable.tsx

import React, { useState } from 'react';
import { ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/20/solid';

interface SalaryData {
  id: string;
  position: string;
  specialty: string;
  location: string;
  years_experience: number;
  salary: number;
  total_comp: number;
}

interface SalaryTableProps {
  data: SalaryData[];
}

const SalaryTable: React.FC<SalaryTableProps> = ({ data }) => {
  const [sortColumn, setSortColumn] = useState<keyof SalaryData>('total_comp');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [expandedRow, setExpandedRow] = useState<string | null>(null);

  const handleSort = (column: keyof SalaryData) => {
    if (column === sortColumn) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('desc');
    }
  };

  const sortedData = [...data].sort((a, b) => {
    if (a[sortColumn] < b[sortColumn]) return sortDirection === 'asc' ? -1 : 1;
    if (a[sortColumn] > b[sortColumn]) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });

  const toggleRowExpansion = (id: string) => {
    setExpandedRow(expandedRow === id ? null : id);
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            {['Position', 'Specialty', 'Location', 'Years of Experience', 'Salary', 'Total Comp'].map((header, index) => (
              <th
                key={header}
                onClick={() => handleSort(header.toLowerCase().replace(/ /g, '_') as keyof SalaryData)}
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
              >
                {header}
                {sortColumn === header.toLowerCase().replace(/ /g, '_') && (
                  sortDirection === 'asc' ? <ChevronUpIcon className="inline w-4 h-4 ml-1" /> : <ChevronDownIcon className="inline w-4 h-4 ml-1" />
                )}
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {sortedData.map((row) => (
            <React.Fragment key={row.id}>
              <tr className="hover:bg-gray-50 cursor-pointer" onClick={() => toggleRowExpansion(row.id)}>
                <td className="px-6 py-4 whitespace-nowrap">{row.position}</td>
                <td className="px-6 py-4 whitespace-nowrap">{row.specialty}</td>
                <td className="px-6 py-4 whitespace-nowrap">{row.location}</td>
                <td className="px-6 py-4 whitespace-nowrap">{row.years_experience}</td>
                <td className="px-6 py-4 whitespace-nowrap">${row.salary.toLocaleString()}</td>
              </tr>
              {expandedRow === row.id && (
                <tr>
                  <td colSpan={6} className="px-6 py-4 bg-gray-50">
                    <div className="text-sm text-gray-900">
                      <h4 className="font-semibold mb-2">Detailed Compensation Breakdown</h4>
                      <p>Base Salary: ${row.salary.toLocaleString()}</p>
                      <p>Bonuses: ${(row.total_comp - row.salary).toLocaleString()}</p>
                      {/* Add more detailed information here */}
                    </div>
                  </td>
                </tr>
              )}
            </React.Fragment>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SalaryTable;

// StatsGrid.tsx

'use client';

import React from 'react';
import { Users, DollarSign, Clock, ChartBar } from 'lucide-react';

const stats = [
  { name: 'Salaries Gathered', value: '10,000+', icon: Users },
  { name: 'Average Salary', value: '$250,000', icon: DollarSign },
  { name: 'Avg. Time in School', value: '11 years', icon: Clock },
  { name: 'Specialties Covered', value: '50+', icon: ChartBar },
];

const StatsGrid: React.FC = () => {
  return (
    <div className="bg-white py-12">
      <div className="container mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {stats.map((stat) => (
            <div key={stat.name} className="bg-soft-gray p-6 rounded-lg shadow-sm">
              <div className="flex items-center justify-center mb-4">
                <stat.icon className="h-8 w-8 text-deep-blue" />
              </div>
              <h3 className="text-lg font-semibold text-center mb-2">{stat.name}</h3>
              <p className="text-2xl font-bold text-center text-deep-blue">{stat.value}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default StatsGrid;

// SummarySection.tsx

import React from 'react';

interface SummarySectionProps {
  data: {
    average_total_comp: number;
    average_years_experience: number;
    most_common_location: string;
  } | null;
}

const SummarySection: React.FC<SummarySectionProps> = ({ data }) => {
  if (!data) return null;

  return (
    <div className="bg-white shadow rounded-lg p-6 mb-8">
      <h2 className="text-2xl font-semibold mb-4">Summary</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <p className="text-sm text-gray-600">Average Total Compensation</p>
          <p className="text-2xl font-bold">${data.average_total_comp.toLocaleString()}</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Average Years of Experience</p>
          <p className="text-2xl font-bold">{data.average_years_experience.toFixed(1)} years</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Most Common Location</p>
          <p className="text-2xl font-bold">{data.most_common_location}</p>
        </div>
      </div>
    </div>
  );
};

export default SummarySection;

// supabaseClient.ts

// utils/supabaseClient.ts

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function AcademiaCompensationPage() {
  return <DetailedCompensationView category="academia" />;
}

// page.tsx

import React from 'react';
import AggregatedCompensationView from '@/components/AggregatedCompensationView';

export default function AggregatedCompensationPage() {
  return <AggregatedCompensationView />;
}

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function HospitalCompensationPage() {
  return <DetailedCompensationView category="hospital" />;
}

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function PrivatePracticeCompensationPage() {
  return <DetailedCompensationView category="private_practice" />;
}

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function ResearchCompensationPage() {
  return <DetailedCompensationView category="research" />;
}

// page.tsx

// app/profile/page.tsx

'use client';

import { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { useRouter } from 'next/navigation';

export default function ProfilePage() {
  const [session, setSession] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const currentSession = supabase.auth.session();
    setSession(currentSession);

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    if (!currentSession) {
      router.push('/signin');
    }
  }, []);

  // Fetch user's submissions and display them

  return (
    <div>
      {/* User's profile and submissions */}
    </div>
  );
}


// page.tsx

// app/signin/page.tsx

'use client';

import { useState } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import { useRouter } from 'next/navigation';

export default function SignInPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) {
      console.error('Error signing in:', error);
      alert('Error signing in');
    } else {
      router.push('/');
    }
  };

  return (
    <div className="max-w-md mx-auto py-8">
      <h1 className="text-2xl font-semibold mb-6">Sign In</h1>
      <form onSubmit={handleSignIn} className="space-y-6">
        {/* Email */}
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        {/* Password */}
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">
            Password
          </label>
          <input
            id="password"
            type="password"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        {/* Submit Button */}
        <div>
          <button
            type="submit"
            className="w-full rounded-md bg-primary py-2 text-white hover:bg-blue-700"
          >
            Sign In
          </button>
        </div>
      </form>
    </div>
  );
}


// page.tsx

// app/signup/page.tsx

'use client';

import { useState } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import { useRouter } from 'next/navigation';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

export default function SignUpPage() {
  const router = useRouter();

  const initialValues = {
    email: '',
    password: '',
    confirmPassword: '',
    full_name: '',
  };

  const validationSchema = Yup.object({
    email: Yup.string().email('Invalid email address').required('Required'),
    password: Yup.string()
      .required('Required')
      .min(8, 'Password must be at least 8 characters'),
    confirmPassword: Yup.string()
      .required('Required')
      .oneOf([Yup.ref('password')], 'Passwords must match'),
    full_name: Yup.string(),
  });

  const handleSignUp = async (values, { setSubmitting, setErrors }) => {
    const { email, password, full_name } = values;

    const { error, data } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name,
        },
      },
    });

    setSubmitting(false);

    if (error) {
      console.error('Error signing up:', error);
      setErrors({ submit: error.message });
    } else {
      alert('Sign-up successful! Please check your email to confirm your account.');
      router.push('/');
    }
  };

  return (
    <div className="max-w-md mx-auto py-8">
      <h1 className="text-2xl font-semibold mb-6">Sign Up</h1>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSignUp}
      >
        {({ isSubmitting, errors }) => (
          <Form className="space-y-6">
            {/* Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email Address
              </label>
              <Field
                id="email"
                name="email"
                type="email"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                required
              />
              <ErrorMessage name="email" component="div" className="text-red-500 text-sm" />
            </div>

            {/* Password */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <Field
                id="password"
                name="password"
                type="password"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                required
              />
              <ErrorMessage name="password" component="div" className="text-red-500 text-sm" />
            </div>

            {/* Confirm Password */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                Confirm Password
              </label>
              <Field
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                required
              />
              <ErrorMessage
                name="confirmPassword"
                component="div"
                className="text-red-500 text-sm"
              />
            </div>

            {/* Full Name */}
            <div>
              <label htmlFor="full_name" className="block text-sm font-medium text-gray-700">
                Full Name (Optional)
              </label>
              <Field
                id="full_name"
                name="full_name"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            {/* Submit Button */}
            <div>
              {errors.submit && <div className="text-red-500 text-sm">{errors.submit}</div>}
              <button
                type="submit"
                className="w-full rounded-md bg-primary py-2 text-white hover:bg-blue-700"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Signing Up...' : 'Sign Up'}
              </button>
            </div>
          </Form>
        )}
      </Formik>
    </div>
  );
}


// page.tsx

'use client';

import { useState } from 'react';
import { supabase } from '../../../lib/supabaseClient';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

export default function SubmitSalaryPage() {
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');

  const initialValues = {
    specialty: '',
    subspecialty: '',
    position: '',
    salary: '',
    location: '',
    years_experience: '',
  };

  const validationSchema = Yup.object({
    specialty: Yup.string().required('Required'),
    subspecialty: Yup.string(),
    position: Yup.string().required('Required'),
    salary: Yup.number().required('Required').positive('Must be a positive number'),
    location: Yup.string().required('Required'),
    years_experience: Yup.number().required('Required').min(0, 'Must be 0 or greater'),
  });

  const handleSubmit = async (values, { resetForm }) => {
    try {
      const { error } = await supabase.from('salaries').insert([
        {
          specialty: values.specialty,
          subspecialty: values.subspecialty,
          position: values.position,
          salary: parseFloat(values.salary),
          location: values.location,
          years_experience: parseInt(values.years_experience),
        },
      ]);

      if (error) throw error;

      setSubmitStatus('success');
      resetForm();
    } catch (error) {
      console.error('Error submitting salary:', error);
      setSubmitStatus('error');
    }
  };

  return (
    <div className="max-w-2xl mx-auto py-8">
      <h1 className="text-2xl font-semibold mb-6">Submit Your Salary</h1>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting }) => (
          <Form className="space-y-6">
            <div>
              <label htmlFor="specialty" className="block text-sm font-medium text-gray-700">
                Specialty
              </label>
              <Field
                name="specialty"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="e.g., Cardiology"
              />
              <ErrorMessage name="specialty" component="div" className="text-red-500 text-sm" />
            </div>

            <div>
              <label htmlFor="subspecialty" className="block text-sm font-medium text-gray-700">
                Subspecialty (optional)
              </label>
              <Field
                name="subspecialty"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="e.g., Interventional Cardiology"
              />
            </div>

            <div>
              <label htmlFor="position" className="block text-sm font-medium text-gray-700">
                Position
              </label>
              <Field
                name="position"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="e.g., Attending Physician"
              />
              <ErrorMessage name="position" component="div" className="text-red-500 text-sm" />
            </div>

            <div>
              <label htmlFor="salary" className="block text-sm font-medium text-gray-700">
                Annual Salary ($)
              </label>
              <Field
                name="salary"
                type="number"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="e.g., 200000"
              />
              <ErrorMessage name="salary" component="div" className="text-red-500 text-sm" />
            </div>

            <div>
              <label htmlFor="location" className="block text-sm font-medium text-gray-700">
                Location
              </label>
              <Field
                name="location"
                type="text"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="e.g., New York City, NY"
              />
              <ErrorMessage name="location" component="div" className="text-red-500 text-sm" />
            </div>

            <div>
              <label htmlFor="years_experience" className="block text-sm font-medium text-gray-700">
                Years of Experience
              </label>
              <Field
                name="years_experience"
                type="number"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                placeholder="e.g., 5"
              />
              <ErrorMessage name="years_experience" component="div" className="text-red-500 text-sm" />
            </div>

            <div>
              <button
                type="submit"
                className="w-full rounded-md bg-vibrant-teal py-2 text-white hover:bg-teal-600 transition duration-300"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Submitting...' : 'Submit Salary'}
              </button>
            </div>
          </Form>
        )}
      </Formik>

      {submitStatus === 'success' && (
        <div className="mt-4 p-4 bg-green-100 text-green-700 rounded-md">
          Salary submitted successfully. Thank you for your contribution!
        </div>
      )}
      {submitStatus === 'error' && (
        <div className="mt-4 p-4 bg-red-100 text-red-700 rounded-md">
          An error occurred while submitting your salary. Please try again later.
        </div>
      )}
    </div>
  );
}

// globals.css

/* app/globals.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom Global Styles */
body {
  @apply font-sans;
}


// layout.tsx

// app/layout.tsx

import './globals.css';
import { Inter } from 'next/font/google';
import NavBar from './NavBar';

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
});

export const metadata = {
  title: 'Medical Levels',
  description: 'Bringing transparency to medical salaries.',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.variable}>
      <body>

          <NavBar />
          <main className="container mx-auto px-4"> {children} </main>

      </body>
    </html>
  );
}


// NavBar.tsx

"use client"

import React, { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Menu, Transition, MenuButton, MenuItems, MenuItem } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { Heart, Brain, Wind, Bone, Microscope } from 'lucide-react';

// Mock data for specialties - replace with actual data fetched from your backend later
const specialties = [
  { name: 'Cardiology', icon: Heart, color: 'hover:text-red-500' },
  { name: 'Neurology', icon: Brain, color: 'hover:text-blue-500' },
  { name: 'Pulmonology', icon: Wind, color: 'hover:text-green-500' },
  { name: 'Orthopedics', icon: Bone, color: 'hover:text-yellow-500' },
  { name: 'Pathology', icon: Microscope, color: 'hover:text-purple-500' },
];

const NavBar: React.FC = () => {
  return (
    <nav className="bg-white shadow-sm">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16 items-center">
          <div className="flex items-center">
            <Link href="/" className="flex-shrink-0">
              <Image src="/logo-large.png" alt="ClearMd Logo" width={100} height={40} />
            </Link>
            <div className="ml-6">
              <Menu as="div" className="relative inline-block text-left">
                <MenuButton className="inline-flex justify-center items-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-vibrant-teal">
                  Specialty
                  <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
                </MenuButton>
                <Transition
                  enter="transition ease-out duration-100"
                  enterFrom="transform opacity-0 scale-95"
                  enterTo="transform opacity-100 scale-100"
                  leave="transition ease-in duration-75"
                  leaveFrom="transform opacity-100 scale-100"
                  leaveTo="transform opacity-0 scale-95"
                >
                  <MenuItems className="absolute left-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 focus:outline-none">
                    <div className="py-1">
                      {specialties.map((specialty) => (
                        <MenuItem key={specialty.name}>
                          {({ active }) => (
                            <Link
                              href={`/specialty/${specialty.name.toLowerCase()}`}
                              className={`${
                                active ? 'bg-gray-100 text-gray-900' : 'text-gray-700'
                              } ${specialty.color} group flex items-center px-4 py-2 text-sm`}
                            >
                              <specialty.icon className="mr-3 h-5 w-5" aria-hidden="true" />
                              {specialty.name}
                            </Link>
                          )}
                        </MenuItem>
                      ))}
                    </div>
                  </MenuItems>
                </Transition>
              </Menu>
            </div>
          </div>
          <div>
            <Link
              href="/submit"
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-vibrant-teal hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-vibrant-teal"
            >
              Add Salary
            </Link>
          </div>
        </div>
      </div>
    </nav>
  );
};

export default NavBar;

// page.module.css

.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition: background 0.2s, color 0.2s, border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 180px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}


// page.tsx

'use client';

import React from 'react';
import HeroSection from '@/components/HeroSection';
import StatsGrid from '@/components/StatsGrid';
import SalaryComparison from '@/components/SalaryComparison';
import CallToAction from '@/components/CallToAction';

export default function HomePage() {
  return (
    <div className="min-h-screen bg-soft-gray">
      <HeroSection />
      <StatsGrid />
      <SalaryComparison />
      <CallToAction />
    </div>
  );
}

// ThemeRegistry.tsx

// app/ThemeRegistry.tsx

'use client';

import React from 'react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1E3A8A', // Navy Blue
    },
    secondary: {
      main: '#4F46E5', // Indigo
    },
    background: {
      default: '#F9FAFB', // Light Grey
    },
    text: {
      primary: '#111827', // Dark Grey
      secondary: '#6B7280', // Medium Grey
    },
  },
  typography: {
    fontFamily: 'Inter, sans-serif',
    h1: {
      fontSize: '2.5rem',
      fontWeight: 500,
    },
    h2: {
      fontSize: '2rem',
      fontWeight: 500,
    },
    // Add more typography settings as needed
  },
  components: {
    // Customize components
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: '8px',
        },
      },
    },
  },
});

export default function ThemeRegistry({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      {children}
    </ThemeProvider>
  );
}


// package.json

{
  "name": "clearmd",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.1.8",
    "@heroicons/react": "^2.1.5",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.45.4",
    "@tailwindcss/forms": "^0.5.9",
    "algoliasearch": "^4.24.0",
    "formik": "^2.4.6",
    "lucide-react": "^0.453.0",
    "next": "14.2.13",
    "react": "^18",
    "react-dom": "^18",
    "react-instantsearch-hooks-web": "^6.47.3",
    "react-table": "^7.8.0",
    "recharts": "^2.12.7",
    "yup": "^1.4.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.2.13",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "typescript": "^5"
  }
}


// postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


// tsconfig.json

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "es2015",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./components/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


// tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        'deep-blue': '#1E3A8A',
        'vibrant-teal': '#14B8A6',
        'soft-gray': '#F3F4F6',
        'slate-gray': '#6B7280',
        'accent-orange': '#F97316',
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
        mono: ['var(--font-geist-mono)'],
      },
      borderRadius: {
        DEFAULT: '8px',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}





// AggregatedCompensationView.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';

import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  LineChart,
  Line,
  Area,
  AreaChart
} from 'recharts';
import SalaryTable from './SalaryTable';
import { 
  Users, 
  TrendingUp, 
  Building2, 
  GraduationCap 
} from 'lucide-react';

const StatCard = ({ title, value, description, icon: Icon, trend = null }) => (
  <div className="bg-white rounded-xl border border-gray-100 p-6 hover:shadow-md transition duration-200">
    <div className="flex items-start justify-between">
      <div>
        <p className="text-sm font-medium text-gray-500">{title}</p>
        <p className="mt-2 text-3xl font-bold text-gray-900">{value}</p>
        {description && (
          <p className="mt-1 text-sm text-gray-600">{description}</p>
        )}
        {trend && (
          <p className={`mt-2 text-sm ${trend >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {trend >= 0 ? '↑' : '↓'} {Math.abs(trend)}% from last year
          </p>
        )}
      </div>
      <div className="flex-shrink-0">
        <div className="flex items-center justify-center h-12 w-12 rounded-lg bg-indigo-50">
          <Icon className="h-6 w-6 text-indigo-600" />
        </div>
      </div>
    </div>
  </div>
);

const formatCurrency = (value) => {
  if (!value) return '$0';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    maximumFractionDigits: 0
  }).format(value);
};

const formatYAxis = (value) => {
  if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;
  if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;
  return `$${value}`;
};

const AggregatedCompensationView: React.FC = () => {
  const [specialties, setSpecialties] = useState<string[]>([]);
  const [selectedSpecialty, setSelectedSpecialty] = useState<string>('');
  const [aggregatedData, setAggregatedData] = useState<any>(null);

  useEffect(() => {
    fetchSpecialties();
  }, []);

  useEffect(() => {
    if (selectedSpecialty) {
      fetchAggregatedData();
    }
  }, [selectedSpecialty]);

  const fetchSpecialties = async () => {
    const { data, error } = await supabase
      .from('salaries')
      .select('specialty')
      .not('specialty', 'is', null)
      .then(result => {
        // Get unique values using a Set
        const uniqueSpecialties = [...new Set(result.data?.map(item => item.specialty))].sort();
        return { data: uniqueSpecialties, error: result.error };
      });
    
    if (error) {
      console.error('Error fetching specialties:', error);
    } else {
      setSpecialties(data || []);
    }
  };

  const fetchAggregatedData = async () => {
    const { data, error } = await supabase
      .from('salaries')
      .select('*')
      .eq('specialty', selectedSpecialty);
    
    if (error) {
      console.error('Error fetching aggregated data:', error);
    } else {
      processAggregatedData(data);
    }
  };

  const processAggregatedData = (data) => {
    const categories = ['academia', 'hospital', 'private_practice', 'research'];
    const processed = {
      averageSalaries: [],
      experienceData: [],
      locationData: {},
      detailedData: data,
    };

    categories.forEach(category => {
      const categoryData = data.filter(item => item.category === category);
      const avgSalary = categoryData.reduce((sum, item) => sum + item.salary, 0) / categoryData.length;
      processed.averageSalaries.push({ category, avgSalary });

      const expData = categoryData.map(item => ({ years: item.years_experience, salary: item.salary }));
      processed.experienceData.push({ category, data: expData });

      const locations = categoryData.reduce((acc, item) => {
        acc[item.location] = (acc[item.location] || 0) + 1;
        return acc;
      }, {});
      processed.locationData[category] = locations;
    });

    setAggregatedData(processed);
  };


  return (
    <div className="container mx-auto py-8 px-4 max-w-7xl">
      {/* Header Section */}
      <div className="mb-8 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            {selectedSpecialty || 'Select a Specialty'}
          </h1>
          <p className="mt-2 text-gray-600">
            Comprehensive compensation data and insights
          </p>
        </div>
        <Menu as="div" className="relative">
          <Menu.Button className="inline-flex justify-between items-center w-64 rounded-lg border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
            {selectedSpecialty || 'Select Specialty'}
            <ChevronDownIcon className="h-5 w-5 text-gray-400" />
          </Menu.Button>
          <Menu.Items className="absolute right-0 mt-2 w-64 rounded-lg shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100">
            {specialties.map((specialty) => (
              <Menu.Item key={specialty}>
                {({ active }) => (
                  <button
                    className={`${
                      active ? 'bg-gray-50' : ''
                    } w-full text-left px-4 py-2 text-sm text-gray-900`}
                    onClick={() => setSelectedSpecialty(specialty)}
                  >
                    {specialty}
                  </button>
                )}
              </Menu.Item>
            ))}
          </Menu.Items>
        </Menu>
      </div>

      {aggregatedData && (
        <>
          {/* Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <StatCard
              title="Total Data Points"
              value={aggregatedData.detailedData.length.toLocaleString()}
              description="Active salary reports"
              icon={Users}
              trend={12}
            />
            <StatCard
              title="Average Compensation"
              value={formatCurrency(
                aggregatedData.averageSalaries.reduce((sum, item) => sum + item.avgSalary, 0) / 
                aggregatedData.averageSalaries.length
              )}
              description="Across all categories"
              icon={TrendingUp}
              trend={8}
            />
            <StatCard
              title="Private vs Academic"
              value={`${formatCurrency(
                aggregatedData.averageSalaries.find(item => item.category === 'private_practice')?.avgSalary
              )} / ${formatCurrency(
                aggregatedData.averageSalaries.find(item => item.category === 'academia')?.avgSalary
              )}`}
              description="Private practice vs Academic salary"
              icon={Building2}
            />
            <StatCard
              title="Experience Premium"
              value="45%"
              description="Salary increase per 5 years"
              icon={GraduationCap}
              trend={5}
            />
          </div>

          {/* Main Charts Section */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {/* Category Comparison */}
            <div className="bg-white p-6 rounded-xl border border-gray-100">
              <h2 className="text-lg font-semibold mb-4">Average Salary by Category</h2>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={aggregatedData.averageSalaries} margin={{ top: 20, right: 30, left: 60, bottom: 20 }}>
                  <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#E5E7EB" />
                  <XAxis 
                    dataKey="category"
                    axisLine={false}
                    tickLine={false}
                    tick={{ fill: '#6B7280', fontSize: 12 }}
                  />
                  <YAxis 
                    axisLine={false}
                    tickLine={false}
                    tick={{ fill: '#6B7280', fontSize: 12 }}
                    tickFormatter={formatYAxis}
                  />
                  <Tooltip
                    formatter={(value) => formatCurrency(value)}
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
                    }}
                  />
                  <Bar 
                    dataKey="avgSalary"
                    fill="#818CF8"
                    radius={[4, 4, 0, 0]}
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Experience Trend */}
            <div className="bg-white p-6 rounded-xl border border-gray-100">
              <h2 className="text-lg font-semibold mb-4">Salary by Experience</h2>
              <ResponsiveContainer width="100%" height={300}>
                <AreaChart
                  data={aggregatedData.experienceData.flatMap(cat => cat.data)}
                  margin={{ top: 20, right: 30, left: 60, bottom: 20 }}
                >
                  <defs>
                    <linearGradient id="colorSalary" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#818CF8" stopOpacity={0.1}/>
                      <stop offset="95%" stopColor="#818CF8" stopOpacity={0.01}/>
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#E5E7EB" />
                  <XAxis
                    dataKey="years"
                    axisLine={false}
                    tickLine={false}
                    tick={{ fill: '#6B7280', fontSize: 12 }}
                  />
                  <YAxis
                    axisLine={false}
                    tickLine={false}
                    tick={{ fill: '#6B7280', fontSize: 12 }}
                    tickFormatter={formatYAxis}
                  />
                  <Tooltip
                    formatter={(value) => formatCurrency(value)}
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
                    }}
                  />
                  <Area
                    type="monotone"
                    dataKey="salary"
                    stroke="#818CF8"
                    fillOpacity={1}
                    fill="url(#colorSalary)"
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* Location Analysis */}
          <div className="mb-8">
            <h2 className="text-lg font-semibold mb-4">Top Locations</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {Object.entries(aggregatedData.locationData).map(([category, locations]) => (
                <div key={category} className="bg-white p-6 rounded-xl border border-gray-100">
                  <h3 className="text-sm font-medium text-gray-500 mb-4 capitalize">{category}</h3>
                  <ul className="space-y-3">
                    {Object.entries(locations as Record<string, number>)
                      .sort(([, a], [, b]) => b - a)
                      .slice(0, 3)
                      .map(([location, count], index) => (
                        <li key={location} className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">{location}</span>
                          <span className="text-sm font-medium text-gray-900">{count} reports</span>
                        </li>
                      ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>

          {/* Detailed Data Table */}
          <div>
            <h2 className="text-lg font-semibold mb-4">Detailed Salary Reports</h2>
            <SalaryTable data={aggregatedData.detailedData} />
          </div>
        </>
      )}
    </div>
  );
};

export default AggregatedCompensationView;

// CallToAction.tsx

import Link from "next/link";

export default function Example() {
  return (
    <div className="bg-white">
      <div className="mx-auto max-w-7xl py-24 sm:px-6 sm:py-32 lg:px-8">
        <div className="relative isolate overflow-hidden bg-gray-900 px-6 py-24 text-center shadow-2xl sm:rounded-3xl sm:px-16">
          <h2 className="text-balance text-4xl font-semibold tracking-tight text-white sm:text-5xl">
            Transparency begins with you
          </h2>
          <p className="mx-auto mt-6 max-w-xl text-pretty text-lg/8 text-gray-300">
          By sharing your salary, you're contributing to a growing resource that empowers medical professionals to understand their worth and make informed career choices.
          </p>
          <div className="mt-10 flex items-center justify-center gap-x-6">
            <Link
              href="/submit"
              className="rounded-md bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm hover:bg-gray-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white"
            >
              Share Salary
            </Link>
            <Link href="/compensation/aggregated" className="text-sm font-semibold leading-6 text-white">
              View Salaries <span aria-hidden="true">→</span>
            </Link>
          </div>
          <svg
            viewBox="0 0 1024 1024"
            aria-hidden="true"
            className="absolute left-1/2 top-1/2 -z-10 h-[64rem] w-[64rem] -translate-x-1/2 [mask-image:radial-gradient(closest-side,white,transparent)]"
          >
            <circle r={512} cx={512} cy={512} fill="url(#827591b1-ce8c-4110-b064-7cb85a0b1217)" fillOpacity="0.7" />
            <defs>
              <radialGradient id="827591b1-ce8c-4110-b064-7cb85a0b1217">
                <stop stopColor="#7775D6" />
                <stop offset={1} stopColor="#E935C1" />
              </radialGradient>
            </defs>
          </svg>
        </div>
      </div>
    </div>
  )
}


// DetailedCompensationView.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  AreaChart,
  Area,
  LineChart,
  Line
} from 'recharts';
import SalaryTable from './SalaryTable';
import { 
  Building2, 
  TrendingUp, 
  MapPin,
  Users,
  GraduationCap,
  ChartBar,
  Briefcase,
  ClipboardList
} from 'lucide-react';
import FilterDropdowns from './FilterDropdowns';

// Category-specific configurations
const categoryConfig = {
  academia: {
    title: 'Academic Medicine',
    metrics: {
      primary: 'Publications',
      secondary: 'Grant Funding',
      tertiary: 'Teaching Hours'
    },
    positions: [
      'Assistant Professor',
      'Associate Professor',
      'Professor',
      'Department Chair',
      'Dean'
    ],
    color: '#818CF8' // Indigo
  },
  hospital: {
    title: 'Hospital Practice',
    metrics: {
      primary: 'Patient Load',
      secondary: 'RVUs',
      tertiary: 'On-Call Hours'
    },
    positions: [
      'Staff Physician',
      'Department Head',
      'Chief of Service',
      'Medical Director'
    ],
    color: '#34D399' // Emerald
  },
  private_practice: {
    title: 'Private Practice',
    metrics: {
      primary: 'Patient Volume',
      secondary: 'Practice Revenue',
      tertiary: 'Partnership Track'
    },
    positions: [
      'Associate',
      'Partner',
      'Senior Partner',
      'Practice Owner'
    ],
    color: '#F472B6' // Pink
  },
  research: {
    title: 'Research',
    metrics: {
      primary: 'Research Grants',
      secondary: 'Publications',
      tertiary: 'Patents'
    },
    positions: [
      'Research Scientist',
      'Senior Researcher',
      'Lab Director',
      'Research Director'
    ],
    color: '#60A5FA' // Blue
  }
};

const StatCard = ({ title, value, description, icon: Icon, trend = null }) => (
  <div className="bg-white rounded-xl border border-gray-100 p-6 hover:shadow-md transition duration-200">
    <div className="flex items-start justify-between">
      <div>
        <p className="text-sm font-medium text-gray-500">{title}</p>
        <p className="mt-2 text-3xl font-bold text-gray-900">{value}</p>
        {description && (
          <p className="mt-1 text-sm text-gray-600">{description}</p>
        )}
        {trend && (
          <p className={`mt-2 text-sm ${trend >= 0 ? 'text-green-600' : 'text-red-600'}`}>
            {trend >= 0 ? '↑' : '↓'} {Math.abs(trend)}% from last year
          </p>
        )}
      </div>
      <div className="flex-shrink-0">
        <div className="flex items-center justify-center h-12 w-12 rounded-lg bg-indigo-50">
          <Icon className="h-6 w-6 text-indigo-600" />
        </div>
      </div>
    </div>
  </div>
);

const formatCurrency = (value) => {
  if (!value) return '$0';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    maximumFractionDigits: 0
  }).format(value);
};

const formatYAxis = (value) => {
  if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;
  if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;
  return `$${value}`;
};

interface DetailedCompensationViewProps {
  category: 'academia' | 'hospital' | 'private_practice' | 'research';
}

const DetailedCompensationView: React.FC<DetailedCompensationViewProps> = ({ category }) => {
  const [filters, setFilters] = useState({
    specialty: '',
    subspecialty: '',
    location: '',
    position: ''
  });
  const [summaryData, setSummaryData] = useState(null);
  const [salaryData, setSalaryData] = useState([]);
  const [experienceData, setExperienceData] = useState([]);
  const [locationData, setLocationData] = useState([]);
  const [trendData, setTrendData] = useState([]);

  useEffect(() => {
    fetchData();
  }, [category, filters]);

  const fetchData = async () => {
    // Fetch summary data
    const { data: summaryData, error: summaryError } = await supabase
      .from('salary_summaries')
      .select('*')
      .eq('category', category)
      .single();

    if (summaryError) {
      console.error('Error fetching summary data:', summaryError);
    } else {
      setSummaryData(summaryData);
    }

    // Fetch detailed salary data
    let query = supabase
      .from('salaries')
      .select('*')
      .eq('category', category);

    // Apply filters
    if (filters.specialty) query = query.eq('specialty', filters.specialty);
    if (filters.subspecialty) query = query.eq('subspecialty', filters.subspecialty);
    if (filters.location) query = query.eq('location', filters.location);
    if (filters.position) query = query.eq('position', filters.position);

    const { data: salaryData, error: salaryError } = await query;

    if (salaryError) {
      console.error('Error fetching salary data:', salaryError);
    } else {
      setSalaryData(salaryData);
    }
  };

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
  };

  const config = categoryConfig[category];

  return (
    <div className="container mx-auto py-8">
      <div className="md:flex md:items-center md:justify-between mb-8">
        <div className="min-w-0 flex-1">
          <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl sm:tracking-tight">
            Back End Developer
          </h2>
        </div>
        <div className="mt-4 flex md:ml-4 md:mt-0">
          <button
            type="button"
            className="ml-3 inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            View all
          </button>
        </div>
      </div>

      <div className="mb-8 flex flex-wrap gap-4">
        <FilterDropdowns filters={filters} onFilterChange={handleFilterChange} />
      </div>

       {/* Stats Grid */}
       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <StatCard
          title="Average Compensation"
          value={formatCurrency(summaryData?.averageComp)}
          description="Total compensation including benefits"
          icon={Building2}
          trend={5}
        />
        <StatCard
          title="Experience Premium"
          value="+45%"
          description="Salary increase per 5 years"
          icon={TrendingUp}
          trend={8}
        />
        <StatCard
          title="Top Location"
          value="New York"
          description="Highest paying region"
          icon={MapPin}
        />
        <StatCard
          title={config.metrics.primary}
          value={summaryData?.[config.metrics.primary.toLowerCase()]}
          description={`Average ${config.metrics.primary.toLowerCase()}`}
          icon={ChartBar}
          trend={12}
        />
      </div>

      {/* Main Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        {/* Compensation by Position */}
        <div className="bg-white p-6 rounded-xl border border-gray-100">
          <h2 className="text-lg font-semibold mb-4">Compensation by Position</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart
              data={salaryData}
              margin={{ top: 20, right: 30, left: 60, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#E5E7EB" />
              <XAxis 
                dataKey="position"
                axisLine={false}
                tickLine={false}
                tick={{ fill: '#6B7280', fontSize: 12 }}
              />
              <YAxis
                axisLine={false}
                tickLine={false}
                tick={{ fill: '#6B7280', fontSize: 12 }}
                tickFormatter={formatYAxis}
              />
              <Tooltip
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  backgroundColor: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
                }}
              />
              <Bar 
                dataKey="salary" 
                fill={config.color}
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Experience Trend */}
        <div className="bg-white p-6 rounded-xl border border-gray-100">
          <h2 className="text-lg font-semibold mb-4">Experience vs. Compensation</h2>
          <ResponsiveContainer width="100%" height={300}>
            <AreaChart
              data={experienceData}
              margin={{ top: 20, right: 30, left: 60, bottom: 20 }}
            >
              <defs>
                <linearGradient id={`color${category}`} x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor={config.color} stopOpacity={0.1}/>
                  <stop offset="95%" stopColor={config.color} stopOpacity={0.01}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#E5E7EB" />
              <XAxis
                dataKey="years"
                axisLine={false}
                tickLine={false}
                tick={{ fill: '#6B7280', fontSize: 12 }}
              />
              <YAxis
                axisLine={false}
                tickLine={false}
                tick={{ fill: '#6B7280', fontSize: 12 }}
                tickFormatter={formatYAxis}
              />
              <Tooltip
                formatter={(value) => formatCurrency(value)}
                contentStyle={{
                  backgroundColor: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)',
                }}
              />
              <Area
                type="monotone"
                dataKey="salary"
                stroke={config.color}
                fillOpacity={1}
                fill={`url(#color${category})`}
              />
            </AreaChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Category-Specific Metrics */}
      <div className="mb-8">
        <h2 className="text-lg font-semibold mb-4">Key Performance Metrics</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {Object.entries(config.metrics).map(([key, metric]) => (
            <div key={key} className="bg-white p-6 rounded-xl border border-gray-100">
              <h3 className="text-sm font-medium text-gray-500 mb-4">{metric}</h3>
              <ResponsiveContainer width="100%" height={100}>
                <LineChart data={trendData}>
                  <Line
                    type="monotone"
                    dataKey={metric.toLowerCase().replace(' ', '_')}
                    stroke={config.color}
                    strokeWidth={2}
                    dot={false}
                  />
                  <XAxis hide={true} />
                  <YAxis hide={true} />
                </LineChart>
              </ResponsiveContainer>
              <div className="mt-4 flex justify-between items-center">
                <span className="text-sm text-gray-600">Last 12 months</span>
                <span className="text-sm font-medium text-gray-900">+12.5%</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Detailed Data Table */}
      <div>
        <h2 className="text-lg font-semibold mb-4">Detailed Reports</h2>
        <SalaryTable data={salaryData} />
      </div>
    </div>
  );
};

export default DetailedCompensationView;

// FilterDropdowns.tsx

import React from 'react';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';

interface FilterDropdownsProps {
  filters: {
    specialty: string;
    subspecialty: string;
    location: string;
    position: string;
  };
  onFilterChange: (newFilters: any) => void;
}

const FilterDropdowns: React.FC<FilterDropdownsProps> = ({ filters, onFilterChange }) => {
  // Mock data for dropdowns - replace with actual data fetched from your backend
  const specialties = ['Cardiology', 'Neurology', 'Oncology'];
  const subspecialties = ['Interventional Cardiology', 'Neurosurgery', 'Medical Oncology'];
  const locations = ['New York', 'California', 'Texas'];
  const positions = ['Professor', 'Associate Professor', 'Assistant Professor'];

  const handleFilterSelect = (filterType: string, value: string) => {
    onFilterChange({ ...filters, [filterType]: value });
  };

  return (
    <div className="flex flex-wrap gap-4 mb-8">
      <FilterDropdown
        label="Specialty"
        options={specialties}
        selected={filters.specialty}
        onSelect={(value) => handleFilterSelect('specialty', value)}
      />
      <FilterDropdown
        label="Subspecialty"
        options={subspecialties}
        selected={filters.subspecialty}
        onSelect={(value) => handleFilterSelect('subspecialty', value)}
      />
      <FilterDropdown
        label="Location"
        options={locations}
        selected={filters.location}
        onSelect={(value) => handleFilterSelect('location', value)}
      />
      <FilterDropdown
        label="Position"
        options={positions}
        selected={filters.position}
        onSelect={(value) => handleFilterSelect('position', value)}
      />
    </div>
  );
};

const FilterDropdown: React.FC<{
  label: string;
  options: string[];
  selected: string;
  onSelect: (value: string) => void;
}> = ({ label, options, selected, onSelect }) => {
  return (
    <Menu as="div" className="relative inline-block text-left">
      <Menu.Button className="inline-flex justify-between items-center w-48 rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-vibrant-teal">
        {selected || label}
        <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
      </Menu.Button>
      <Menu.Items className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
        <div className="py-1">
          {options.map((option) => (
            <Menu.Item key={option}>
              {({ active }) => (
                <button
                  onClick={() => onSelect(option)}
                  className={`${
                    active ? 'bg-gray-100 text-gray-900' : 'text-gray-700'
                  } block px-4 py-2 text-sm w-full text-left`}
                >
                  {option}
                </button>
              )}
            </Menu.Item>
          ))}
        </div>
      </Menu.Items>
    </Menu>
  );
};

export default FilterDropdowns;

// Footer.tsx

const navigation = {
  solutions: [
    { name: 'Marketing', href: '#' },
    { name: 'Analytics', href: '#' },
    { name: 'Automation', href: '#' },
    { name: 'Commerce', href: '#' },
    { name: 'Insights', href: '#' },
  ],
  support: [
    { name: 'Submit ticket', href: '#' },
    { name: 'Documentation', href: '#' },
    { name: 'Guides', href: '#' },
  ],
  company: [
    { name: 'About', href: '#' },
    { name: 'Blog', href: '#' },
    { name: 'Jobs', href: '#' },
    { name: 'Press', href: '#' },
  ],
  legal: [
    { name: 'Terms of service', href: '#' },
    { name: 'Privacy policy', href: '#' },
    { name: 'License', href: '#' },
  ],
  social: [
    {
      name: 'Facebook',
      href: '#',
      icon: (props) => (
        <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
          <path
            fillRule="evenodd"
            d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z"
            clipRule="evenodd"
          />
        </svg>
      ),
    },
    {
      name: 'Instagram',
      href: '#',
      icon: (props) => (
        <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
          <path
            fillRule="evenodd"
            d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z"
            clipRule="evenodd"
          />
        </svg>
      ),
    },
    {
      name: 'X',
      href: '#',
      icon: (props) => (
        <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
          <path d="M13.6823 10.6218L20.2391 3H18.6854L12.9921 9.61788L8.44486 3H3.2002L10.0765 13.0074L3.2002 21H4.75404L10.7663 14.0113L15.5685 21H20.8131L13.6819 10.6218H13.6823ZM11.5541 13.0956L10.8574 12.0991L5.31391 4.16971H7.70053L12.1742 10.5689L12.8709 11.5655L18.6861 19.8835H16.2995L11.5541 13.096V13.0956Z" />
        </svg>
      ),
    },
    {
      name: 'GitHub',
      href: '#',
      icon: (props) => (
        <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
          <path
            fillRule="evenodd"
            d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
            clipRule="evenodd"
          />
        </svg>
      ),
    },
    {
      name: 'YouTube',
      href: '#',
      icon: (props) => (
        <svg fill="currentColor" viewBox="0 0 24 24" {...props}>
          <path
            fillRule="evenodd"
            d="M19.812 5.418c.861.23 1.538.907 1.768 1.768C21.998 8.746 22 12 22 12s0 3.255-.418 4.814a2.504 2.504 0 0 1-1.768 1.768c-1.56.419-7.814.419-7.814.419s-6.255 0-7.814-.419a2.505 2.505 0 0 1-1.768-1.768C2 15.255 2 12 2 12s0-3.255.417-4.814a2.507 2.507 0 0 1 1.768-1.768C5.744 5 11.998 5 11.998 5s6.255 0 7.814.418ZM15.194 12 10 15V9l5.194 3Z"
            clipRule="evenodd"
          />
        </svg>
      ),
    },
  ],
}

export default function Footer() {
  return (
    <footer className="bg-white mx-auto max-w-6xl">
      <div className="mx-auto max-w-7xl px-6 pb-8 pt-16 sm:pt-24 lg:px-8 lg:pt-32">
        <div className="xl:grid xl:grid-cols-3 xl:gap-8">
          <div className="space-y-8">
            <img
              alt="Company name"
              src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=600"
              className="h-9"
            />
            <p className="text-balance text-sm/6 text-gray-600">
              Making the world a better place through constructing elegant hierarchies.
            </p>
            <div className="flex gap-x-6">
              {navigation.social.map((item) => (
                <a key={item.name} href={item.href} className="text-gray-600 hover:text-gray-800">
                  <span className="sr-only">{item.name}</span>
                  <item.icon aria-hidden="true" className="h-6 w-6" />
                </a>
              ))}
            </div>
          </div>
          <div className="mt-16 grid grid-cols-2 gap-8 xl:col-span-2 xl:mt-0">
            <div className="md:grid md:grid-cols-2 md:gap-8">
              <div>
                <h3 className="text-sm/6 font-semibold text-gray-900">Solutions</h3>
                <ul role="list" className="mt-6 space-y-4">
                  {navigation.solutions.map((item) => (
                    <li key={item.name}>
                      <a href={item.href} className="text-sm/6 text-gray-600 hover:text-gray-900">
                        {item.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-10 md:mt-0">
                <h3 className="text-sm/6 font-semibold text-gray-900">Support</h3>
                <ul role="list" className="mt-6 space-y-4">
                  {navigation.support.map((item) => (
                    <li key={item.name}>
                      <a href={item.href} className="text-sm/6 text-gray-600 hover:text-gray-900">
                        {item.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
            <div className="md:grid md:grid-cols-2 md:gap-8">
              <div>
                <h3 className="text-sm/6 font-semibold text-gray-900">Company</h3>
                <ul role="list" className="mt-6 space-y-4">
                  {navigation.company.map((item) => (
                    <li key={item.name}>
                      <a href={item.href} className="text-sm/6 text-gray-600 hover:text-gray-900">
                        {item.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-10 md:mt-0">
                <h3 className="text-sm/6 font-semibold text-gray-900">Legal</h3>
                <ul role="list" className="mt-6 space-y-4">
                  {navigation.legal.map((item) => (
                    <li key={item.name}>
                      <a href={item.href} className="text-sm/6 text-gray-600 hover:text-gray-900">
                        {item.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div className="mt-16 border-t border-gray-900/10 pt-8 sm:mt-20 lg:mt-24">
          <p className="text-sm/6 text-gray-600">&copy; 2024 Your Company, Inc. All rights reserved.</p>
        </div>
      </div>
    </footer>
  )
}


// MainHeroSection.tsx

// src/components/MainHeroSection.tsx
import React from 'react';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { motion, AnimatePresence } from 'framer-motion';

interface MainHeroSectionProps {
  specialties: string[];
  subspecialties: string[];
  selectedSpecialty: string;
  selectedSubspecialty: string;
  onSpecialtyChange: (specialty: string) => void;
  onSubspecialtyChange: (subspecialty: string) => void;
  stats: {
    averageSalary: string;
    topLocation: string;
    popularSubspecialty: string;
    dataPoints: string;
  };
}

const MainHeroSection: React.FC<MainHeroSectionProps> = ({
  specialties,
  subspecialties,
  selectedSpecialty,
  selectedSubspecialty,
  onSpecialtyChange,
  onSubspecialtyChange,
  stats,
}) => {
  const handleSpecialtyChange = (specialty: string) => {
    onSpecialtyChange(specialty);
    // Reset subspecialty when specialty changes
    onSubspecialtyChange('');
  };

  return (
    <div className="relative isolate overflow-hidden bg-white py-24 sm:py-32">
      <svg
        aria-hidden="true"
        className="absolute inset-0 -z-10 h-full w-full stroke-gray-200 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
      >
        <defs>
          <pattern
            x="50%"
            y={-1}
            id="0787a7c5-978c-4f66-83c7-11c213f99cb7"
            width={200}
            height={200}
            patternUnits="userSpaceOnUse"
          >
            <path d="M.5 200V.5H200" fill="none" />
          </pattern>
        </defs>
        <rect fill="url(#0787a7c5-978c-4f66-83c7-11c213f99cb7)" width="100%" height="100%" strokeWidth={0} />
      </svg>
      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        <div className="mx-auto max-w-2xl lg:max-w-none">
          <div className="text-center">
            <h2 className="text-balance text-4xl font-semibold tracking-tight text-gray-900 sm:text-5xl">
              Transparent medical compensations
            </h2>
            <p className="mt-4 text-lg leading-8 text-gray-600">
              No more salary uncertainty
            </p>
          </div>

          {/* Specialty Filters */}
          <div className="mt-8 flex justify-center gap-4">
            <Menu as="div" className="relative">
              <Menu.Button className="inline-flex w-48 justify-between items-center rounded-md bg-white px-4 py-2 text-sm font-medium text-gray-700 border border-gray-300 hover:bg-gray-50">
                {selectedSpecialty || 'Select Specialty'}
                <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
              </Menu.Button>
              <Menu.Items className="absolute z-10 mt-2 w-48 h-72 overflow-auto rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                <div className="py-1">
                  {specialties.map((specialty) => (
                    <Menu.Item key={specialty}>
                      {({ active }) => (
                        <button
                          onClick={() => handleSpecialtyChange(specialty)}
                          className={`${
                            active ? 'bg-gray-100' : ''
                          } block px-4 py-2 text-sm text-gray-700 w-full text-left`}
                        >
                          {specialty}
                        </button>
                      )}
                    </Menu.Item>
                  ))}
                </div>
              </Menu.Items>
            </Menu>

            <Menu as="div" className="relative">
              <Menu.Button 
                className={`inline-flex w-48 justify-between items-center rounded-md bg-white px-4 py-2 text-sm font-medium border border-gray-300 
                  ${selectedSpecialty ? 'text-gray-700 hover:bg-gray-50' : 'text-gray-400 cursor-not-allowed'}`}
                disabled={!selectedSpecialty}
              >
                {selectedSubspecialty || 'Select Subspecialty'}
                <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
              </Menu.Button>
              <Menu.Items className="absolute z-10 mt-2 w-48 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                <div className="py-1">
                  {subspecialties.map((subspecialty) => (
                    <Menu.Item key={subspecialty}>
                      {({ active }) => (
                        <button
                          onClick={() => onSubspecialtyChange(subspecialty)}
                          className={`${
                            active ? 'bg-gray-100' : ''
                          } block px-4 py-2 text-sm text-gray-700 w-full text-left`}
                        >
                          {subspecialty}
                        </button>
                      )}
                    </Menu.Item>
                  ))}
                </div>
              </Menu.Items>
            </Menu>
          </div>

          {/* Stats Grid */}
          <dl className="mt-16 grid grid-cols-1 gap-0.5 overflow-hidden rounded-2xl text-center sm:grid-cols-2 lg:grid-cols-4">
            <AnimatePresence mode="wait">
              <motion.div
                key={`salary-${stats.averageSalary}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="flex flex-col bg-gray-400/5 p-8"
              >
                <dt className="text-sm font-semibold leading-6 text-gray-600">Average Salary</dt>
                <dd className="order-first text-3xl font-semibold tracking-tight text-gray-900">
                  {stats.averageSalary}
                </dd>
              </motion.div>

              <motion.div
                key={`location-${stats.topLocation}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3, delay: 0.1 }}
                className="flex flex-col bg-gray-400/5 p-8"
              >
                <dt className="text-sm font-semibold leading-6 text-gray-600">Years to graduate</dt>
                <dd className="order-first text-3xl font-semibold tracking-tight text-gray-900">
                  {stats.topLocation}
                </dd>
              </motion.div>

              <motion.div
                key={`subspecialty-${stats.popularSubspecialty}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3, delay: 0.2 }}
                className="flex flex-col bg-gray-400/5 p-8"
              >
                <dt className="text-sm font-semibold leading-6 text-gray-600">Comparative salary</dt>
                <dd className="order-first text-3xl font-semibold tracking-tight text-gray-900">
                  {stats.popularSubspecialty}
                </dd>
              </motion.div>

              <motion.div
                key={`datapoints-${stats.dataPoints}`}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3, delay: 0.3 }}
                className="flex flex-col bg-gray-400/5 p-8"
              >
                <dt className="text-sm font-semibold leading-6 text-gray-600">Data Points</dt>
                <dd className="order-first text-3xl font-semibold tracking-tight text-gray-900">
                  {stats.dataPoints}
                </dd>
              </motion.div>
            </AnimatePresence>
          </dl>
        </div>
      </div>
    </div>
  );
};

export default MainHeroSection

// SalaryComparison.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { Tab } from '@headlessui/react';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer 
} from 'recharts';
import { Menu } from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { motion } from 'framer-motion';

// Custom tooltip component for cleaner tooltips
const CustomTooltip = ({ active, payload, label }) => {
  if (!active || !payload) return null;

  return (
    <div className="bg-white p-4 shadow-lg rounded-lg border border-gray-100">
      <p className="font-medium text-gray-900 mb-2">{label}</p>
      {payload.map((item, index) => (
        <div key={index} className="flex items-center justify-between gap-4">
          <span className="text-sm text-gray-600">{item.name}:</span>
          <span className="text-sm font-medium text-gray-900">
            ${item.value.toLocaleString()}
          </span>
        </div>
      ))}
      <div className="mt-2 pt-2 border-t border-gray-100">
        <div className="flex items-center justify-between">
          <span className="text-sm text-gray-600">Total:</span>
          <span className="text-sm font-medium text-gray-900">
            ${payload.reduce((sum, item) => sum + (item.value || 0), 0).toLocaleString()}
          </span>
        </div>
      </div>
    </div>
  );
};

// Custom Y-Axis tick formatter
const formatYAxis = (value) => {
  if (value >= 1000000) {
    return `$${(value / 1000000).toFixed(1)}M`;
  }
  if (value >= 1000) {
    return `$${(value / 1000).toFixed(0)}K`;
  }
  return `$${value}`;
};

// Chart theme colors
const chartColors = {
  baseSalary: {
    fill: '#818CF8',
    hover: '#6366F1'
  },
  rvu: {
    fill: '#60A5FA',
    hover: '#3B82F6'
  },
  partnership: {
    fill: '#34D399',
    hover: '#10B981'
  },
  bonus: {
    fill: '#FBBF24',
    hover: '#F59E0B'
  }
};
interface Position {
  title: string;
  baseSalary: number;
  rvu?: number;
  partnership?: number;
  bonus?: number;
  totalComp: number;
}

interface SalaryComparisonProps {
  selectedSpecialty: string;
  selectedSubspecialty: string;
}

const categories = ['Academia', 'Research', 'Hospital', 'Private'];
const locations = ['New York', 'Los Angeles', 'Chicago', 'Houston'];

const SalaryComparison: React.FC<SalaryComparisonProps> = ({
  selectedSpecialty,
  selectedSubspecialty,
}) => {
  const [selectedLocation, setSelectedLocation] = useState(locations[0]);
  const [hoveredPosition, setHoveredPosition] = useState<string | null>(null);
  const [positions, setPositions] = useState<Record<string, Position[]>>({
    Academia: [],
    Research: [],
    Hospital: [],
    Private: [],
  });

  // Mock data - replace with actual data fetch
  useEffect(() => {
    const mockData = {
      Academia: [
        { title: 'Assistant Professor', baseSalary: 150000, rvu: 30000, totalComp: 180000 },
        { title: 'Associate Professor', baseSalary: 180000, rvu: 40000, totalComp: 220000 },
        { title: 'Full Professor', baseSalary: 220000, rvu: 50000, totalComp: 270000 },
      ],
      Research: [
        { title: 'Research Associate', baseSalary: 130000, bonus: 20000, totalComp: 150000 },
        { title: 'Senior Researcher', baseSalary: 160000, bonus: 30000, totalComp: 190000 },
      ],
      Hospital: [
        { title: 'Staff Physician', baseSalary: 200000, rvu: 50000, totalComp: 250000 },
        { title: 'Department Head', baseSalary: 250000, rvu: 70000, totalComp: 320000 },
      ],
      Private: [
        { title: 'Private Practice', baseSalary: 220000, partnership: 100000, totalComp: 320000 },
        { title: 'Partner', baseSalary: 300000, partnership: 150000, totalComp: 450000 },
      ],
    };

    setPositions(mockData);
  }, [selectedSpecialty, selectedSubspecialty, selectedLocation]);

  return (
    <div className="bg-white py-8">
      <div className="container mx-auto px-6 lg:px-8">
        <div className="flex items-center mb-6">
          <h2 className="text-2xl font-bold">Salary Comparison</h2>
          <div className="ml-8">
            <Menu as="div" className="relative">
              <Menu.Button className="inline-flex w-48 justify-between items-center rounded-md bg-white px-4 py-2 text-sm font-medium text-gray-700 border border-gray-300 hover:bg-gray-50">
                {selectedLocation}
                <ChevronDownIcon className="-mr-1 ml-2 h-5 w-5" aria-hidden="true" />
              </Menu.Button>
              <Menu.Items className="absolute z-10 mt-2 w-48 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                <div className="py-1">
                  {locations.map((location) => (
                    <Menu.Item key={location}>
                      {({ active }) => (
                        <button
                          onClick={() => setSelectedLocation(location)}
                          className={`${
                            active ? 'bg-gray-100' : ''
                          } block px-4 py-2 text-sm text-gray-700 w-full text-left`}
                        >
                          {location}
                        </button>
                      )}
                    </Menu.Item>
                  ))}
                </div>
              </Menu.Items>
            </Menu>
          </div>
        </div>

        <div className="bg-white rounded-xl border border-gray-200 shadow-sm">
          <Tab.Group>
            <Tab.List className="flex border-b border-gray-200">
              {categories.map((category) => (
                <Tab
                  key={category}
                  className={({ selected }) =>
                    `flex-1 py-4 px-4 text-sm font-medium text-center focus:outline-none transition-colors duration-200
                    ${
                      selected
                        ? 'text-indigo-600 border-b-2 border-indigo-600 bg-indigo-50/50'
                        : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                    }`
                  }
                >
                  {category}
                </Tab>
              ))}
            </Tab.List>

            <Tab.Panels className="p-6">
              {categories.map((category) => (
                <Tab.Panel key={category} className="focus:outline-none">
                  <div className="grid grid-cols-12 gap-6">
                    {/* Position List */}
                    <div className="col-span-3 bg-gray-50/50 rounded-xl p-4">
                      <div className="space-y-2">
                        {positions[category].map((position) => (
                          <motion.div
                            key={position.title}
                            onHoverStart={() => setHoveredPosition(position.title)}
                            onHoverEnd={() => setHoveredPosition(null)}
                            className={`p-4 rounded-lg cursor-pointer transition-all duration-200
                              ${
                                hoveredPosition === position.title
                                  ? 'bg-indigo-50 shadow-sm'
                                  : 'hover:bg-white hover:shadow-sm'
                              }`}
                          >
                            <h3 className="font-medium text-gray-900">{position.title}</h3>
                            <p className="text-sm text-gray-500">
                              Total: ${position.totalComp.toLocaleString()}
                            </p>
                          </motion.div>
                        ))}
                      </div>
                    </div>

                    {/* Chart */}
                    <div className="col-span-9">
                      <ResponsiveContainer width="100%" height={400}>
                        <BarChart
                          data={positions[category].map(position => ({
                            ...position,
                            opacity: hoveredPosition ? (position.title === hoveredPosition ? 1 : 0.3) : 1
                          }))}
                          margin={{ top: 20, right: 30, left: 60, bottom: 30 }}
                          barSize={120}
                        >
                          <CartesianGrid 
                            strokeDasharray="3 3" 
                            vertical={false}
                            stroke="#E5E7EB"
                          />
                          <XAxis 
                            dataKey="title"
                            axisLine={false}
                            tickLine={false}
                            tick={{ 
                              fill: '#6B7280',
                              fontSize: 12,
                              fontWeight: 500
                            }}
                            dy={10}
                          />
                          <YAxis 
                            axisLine={false}
                            tickLine={false}
                            tick={{ 
                              fill: '#6B7280',
                              fontSize: 12
                            }}
                            tickFormatter={formatYAxis}
                            dx={-10}
                          />
                          <Tooltip 
                            content={<CustomTooltip />}
                            coordinate={{x: 0, y: 0}}
                            cursor={{ fill: 'transparent' }}
                          />
                          {[
                            { key: 'baseSalary', name: 'Base Salary' },
                            { key: 'rvu', name: 'RVU' },
                            { key: 'partnership', name: 'Partnership' },
                            { key: 'bonus', name: 'Bonus' }
                          ].map(({ key, name }) => (
                            <Bar
                              key={key}
                              dataKey={key}
                              name={name}
                              stackId="compensation"
                              fill={chartColors[key].fill}
                              stroke="none"
                              radius={[4, 4, 0, 0]}
                              onMouseOver={() => {
                                // Update hover state for animation if needed
                              }}
                            />
                          ))}
                        </BarChart>
                      </ResponsiveContainer>

                      {/* Legend */}
                      <div className="flex justify-center gap-8 mt-8">
                        {Object.entries(chartColors).map(([key, { fill }]) => (
                          <div key={key} className="flex items-center">
                            <div 
                              className="w-3 h-3 rounded mr-2"
                              style={{ backgroundColor: fill }}
                            />
                            <span className="text-sm text-gray-600 font-medium">
                              {key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </Tab.Panel>
              ))}
            </Tab.Panels>
          </Tab.Group>
        </div>
      </div>
    </div>
  );
};

export default SalaryComparison;

// SalaryTable.tsx

'use client';

import React, { useState } from 'react';
import { ChevronDownIcon, ChevronUpIcon, MapPinIcon, BriefcaseIcon, BuildingOffice2Icon, CalendarIcon } from '@heroicons/react/20/solid';

interface CompensationBreakdown {
  base: number;
  bonus?: number;
  stock?: number;
  other?: number;
}

interface SalaryData {
  id: string;
  specialty: string;
  subspecialty?: string;
  position: string;
  category: 'academia' | 'hospital' | 'research' | 'private_practice';
  location: string;
  yearsExperience: {
    total: number;
    role: number;
  };
  compensation: CompensationBreakdown;
  date: string;
}

const sampleSalaryData: SalaryData[] = [
  {
    id: '1',
    specialty: 'Cardiology',
    subspecialty: 'Interventional Cardiology',
    position: 'Associate Professor',
    category: 'academia',
    location: 'New York, NY',
    yearsExperience: {
      total: 12,
      role: 5
    },
    compensation: {
      base: 280000,
      bonus: 45000,
      other: 25000
    },
    date: '2024-01-15'
  },
  {
    id: '2',
    specialty: 'Cardiology',
    subspecialty: 'Electrophysiology',
    position: 'Department Head',
    category: 'hospital',
    location: 'Boston, MA',
    yearsExperience: {
      total: 15,
      role: 3
    },
    compensation: {
      base: 400000,
      bonus: 100000,
      stock: 50000
    },
    date: '2024-01-20'
  },
  {
    id: '3',
    specialty: 'Neurology',
    subspecialty: 'Movement Disorders',
    position: 'Senior Researcher',
    category: 'research',
    location: 'San Francisco, CA',
    yearsExperience: {
      total: 8,
      role: 4
    },
    compensation: {
      base: 220000,
      bonus: 30000,
      stock: 40000,
      other: 15000
    },
    date: '2024-01-25'
  },
  {
    id: '4',
    specialty: 'Orthopedics',
    subspecialty: 'Sports Medicine',
    position: 'Practice Owner',
    category: 'private_practice',
    location: 'Miami, FL',
    yearsExperience: {
      total: 18,
      role: 7
    },
    compensation: {
      base: 500000,
      bonus: 200000,
      other: 100000
    },
    date: '2024-02-01'
  },
  {
    id: '5',
    specialty: 'Cardiology',
    subspecialty: 'Non-invasive Cardiology',
    position: 'Assistant Professor',
    category: 'academia',
    location: 'Chicago, IL',
    yearsExperience: {
      total: 6,
      role: 2
    },
    compensation: {
      base: 240000,
      bonus: 30000,
      other: 20000
    },
    date: '2024-02-05'
  },
  {
    id: '6',
    specialty: 'Neurology',
    subspecialty: 'Stroke',
    position: 'Medical Director',
    category: 'hospital',
    location: 'Los Angeles, CA',
    yearsExperience: {
      total: 14,
      role: 4
    },
    compensation: {
      base: 380000,
      bonus: 80000,
      stock: 40000
    },
    date: '2024-02-10'
  },
  {
    id: '7',
    specialty: 'Pediatrics',
    subspecialty: 'Neonatology',
    position: 'Division Chief',
    category: 'hospital',
    location: 'Houston, TX',
    yearsExperience: {
      total: 16,
      role: 6
    },
    compensation: {
      base: 360000,
      bonus: 90000,
      stock: 30000,
      other: 20000
    },
    date: '2024-02-15'
  },
  {
    id: '8',
    specialty: 'Surgery',
    subspecialty: 'Cardiac Surgery',
    position: 'Senior Partner',
    category: 'private_practice',
    location: 'Seattle, WA',
    yearsExperience: {
      total: 20,
      role: 8
    },
    compensation: {
      base: 600000,
      bonus: 300000,
      other: 150000
    },
    date: '2024-02-20'
  },
  {
    id: '9',
    specialty: 'Radiology',
    subspecialty: 'Interventional Radiology',
    position: 'Research Director',
    category: 'research',
    location: 'Philadelphia, PA',
    yearsExperience: {
      total: 10,
      role: 3
    },
    compensation: {
      base: 300000,
      bonus: 50000,
      stock: 60000,
      other: 25000
    },
    date: '2024-02-25'
  },
  {
    id: '10',
    specialty: 'Anesthesiology',
    position: 'Staff Physician',
    category: 'hospital',
    location: 'Denver, CO',
    yearsExperience: {
      total: 5,
      role: 2
    },
    compensation: {
      base: 340000,
      bonus: 40000,
      other: 20000
    },
    date: '2024-03-01'
  }
];


interface SalaryTableProps {
  data: SalaryData[];
  itemsPerPage?: number;
}

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    maximumFractionDigits: 0
  }).format(amount);
};

const calculateTotal = (comp: CompensationBreakdown): number => {
  return comp.base + (comp.bonus || 0) + (comp.stock || 0) + (comp.other || 0);
};

const ExpandedDetails: React.FC<{ data: SalaryData }> = ({ data }) => {
  return (
    <tr className="relative">
      <td colSpan={4} className="px-0 py-4 bg-white shadow-md">
        <div className="px-8 py-6">
          {/* Main compensation section */}
          <div className="mb-8">
            <h4 className="text-sm font-medium text-gray-900 mb-4">Compensation Details</h4>
            <div className="grid grid-cols-3 gap-6">
              <div className="bg-indigo-50/50 rounded-lg p-4">
                <div className="text-sm text-gray-500 mb-2">Base Salary</div>
                <div className="text-lg font-semibold text-gray-900">
                  {formatCurrency(data.compensation.base)}
                </div>
              </div>

              {data.compensation.bonus && (
                <div className="bg-indigo-50/50 rounded-lg p-4">
                  <div className="text-sm text-gray-500 mb-2">Annual Bonus</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {formatCurrency(data.compensation.bonus)}
                  </div>
                </div>
              )}

              {data.compensation.stock && (
                <div className="bg-indigo-50/50 rounded-lg p-4">
                  <div className="text-sm text-gray-500 mb-2">Stock/RSU</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {formatCurrency(data.compensation.stock)}
                  </div>
                </div>
              )}

              {data.compensation.other && (
                <div className="bg-indigo-50/50 rounded-lg p-4">
                  <div className="text-sm text-gray-500 mb-2">Other Compensation</div>
                  <div className="text-lg font-semibold text-gray-900">
                    {formatCurrency(data.compensation.other)}
                  </div>
                </div>
              )}
            </div>

            <div className="mt-4 p-4 bg-gray-50 rounded-lg">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-gray-900">Total Compensation</span>
                <span className="text-lg font-bold text-gray-900">
                  {formatCurrency(calculateTotal(data.compensation))}
                </span>
              </div>
            </div>
          </div>

          {/* Position and Experience Details */}
          <div className="grid grid-cols-2 gap-8">
            <div>
              <h4 className="text-sm font-medium text-gray-900 mb-4">Position Details</h4>
              <div className="space-y-4">
                <div className="bg-indigo-50/50 rounded-lg p-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Title</div>
                      <div className="text-sm font-medium text-gray-900">{data.position}</div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Category</div>
                      <div className="text-sm font-medium text-gray-900 capitalize">
                        {data.category.replace('_', ' ')}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Specialty</div>
                      <div className="text-sm font-medium text-gray-900">{data.specialty}</div>
                    </div>
                    {data.subspecialty && (
                      <div>
                        <div className="text-sm text-gray-500 mb-1">Subspecialty</div>
                        <div className="text-sm font-medium text-gray-900">{data.subspecialty}</div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div>
              <h4 className="text-sm font-medium text-gray-900 mb-4">Additional Information</h4>
              <div className="space-y-4">
                <div className="bg-indigo-50/50 rounded-lg p-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Location</div>
                      <div className="text-sm font-medium text-gray-900">{data.location}</div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Date Added</div>
                      <div className="text-sm font-medium text-gray-900">
                        {new Date(data.date).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Years in Role</div>
                      <div className="text-sm font-medium text-gray-900">
                        {data.yearsExperience.role} years
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-500 mb-1">Total Experience</div>
                      <div className="text-sm font-medium text-gray-900">
                        {data.yearsExperience.total} years
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </td>
    </tr>
  );
};

const SalaryTable: React.FC<SalaryTableProps> = ({ data, itemsPerPage = 40 }) => {
  const [sortColumn, setSortColumn] = useState<string>('compensation');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [expandedRow, setExpandedRow] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);

  const handleSort = (column: string) => {
    if (column === sortColumn) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('desc');
    }
  };

  const sortedData = [...sampleSalaryData].sort((a, b) => {
    let aValue = sortColumn === 'compensation' ? calculateTotal(a.compensation) : a[sortColumn];
    let bValue = sortColumn === 'compensation' ? calculateTotal(b.compensation) : b[sortColumn];
    
    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });

  const totalPages = Math.ceil(sortedData.length / itemsPerPage);
  const paginatedData = sortedData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const SortIcon = ({ column }: { column: string }) => {
    if (column !== sortColumn) return <ChevronUpIcon className="w-4 h-4 text-gray-400" />;
    return sortDirection === 'asc' 
      ? <ChevronUpIcon className="w-4 h-4 text-gray-700" />
      : <ChevronDownIcon className="w-4 h-4 text-gray-700" />;
  };

  return (
    <div className="bg-white shadow rounded-lg overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-100">
            <tr>
              <th 
                onClick={() => handleSort('specialty')}
                className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-150"
              >
                <div className="flex items-center gap-2">
                  Specialty
                  <SortIcon column="specialty" />
                </div>
              </th>
              <th 
                onClick={() => handleSort('position')}
                className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-150"
              >
                <div className="flex items-center gap-2">
                  Position
                  <SortIcon column="position" />
                </div>
              </th>
              <th 
                onClick={() => handleSort('yearsExperience')}
                className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-150"
              >
                <div className="flex items-center gap-2">
                  Years of Experience
                  <SortIcon column="yearsExperience" />
                </div>
              </th>
              <th 
                onClick={() => handleSort('compensation')}
                className="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-150"
              >
                <div className="flex items-center gap-2">
                  Total Compensation (USD)
                  <SortIcon column="compensation" />
                </div>
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 bg-white">
            {paginatedData.map((row, idx) => (
              <React.Fragment key={row.id}>
                <tr 
                  className={`
                    ${idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}
                    ${expandedRow === row.id ? 'border-b-0 bg-white' : ''}
                    hover:bg-gray-100 cursor-pointer transition-colors
                  `}
                  onClick={() => setExpandedRow(expandedRow === row.id ? null : row.id)}
                >
                  <td className="px-6 py-4">
                    <div className="font-medium text-gray-900">{row.specialty}</div>
                    {row.subspecialty && (
                      <div className="text-sm text-gray-500">{row.subspecialty}</div>
                    )}
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-gray-900">{row.position}</div>
                    <div className="text-sm text-gray-500 capitalize">{row.category.replace('_', ' ')}</div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-gray-900">{row.yearsExperience.total} yrs total</div>
                    <div className="text-sm text-gray-500">{row.yearsExperience.role} yrs in role</div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="font-medium text-gray-900">
                      {formatCurrency(calculateTotal(row.compensation))}
                    </div>
                    <div className="text-sm text-gray-500">
                      Base: {formatCurrency(row.compensation.base)}
                    </div>
                  </td>
                </tr>
                {expandedRow === row.id && (
                  <ExpandedDetails data={row} />
                )}
              </React.Fragment>
              ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-700">
              Page {currentPage} of {totalPages}
            </span>
          </div>
          <div className="flex gap-2">
            <button
              onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Previous
            </button>
            <button
              onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default SalaryTable;

// SummarySection.tsx

import React from 'react';

interface SummarySectionProps {
  data: {
    average_total_comp: number;
    average_years_experience: number;
    most_common_location: string;
  } | null;
}

const SummarySection: React.FC<SummarySectionProps> = ({ data }) => {
  if (!data) return null;

  return (
    <div className="bg-white shadow rounded-lg p-6 mb-8">
      <h2 className="text-2xl font-semibold mb-4">Summary</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <p className="text-sm text-gray-600">Average Total Compensation</p>
          <p className="text-2xl font-bold">${data.average_total_comp.toLocaleString()}</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Average Years of Experience</p>
          <p className="text-2xl font-bold">{data.average_years_experience.toFixed(1)} years</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Most Common Location</p>
          <p className="text-2xl font-bold">{data.most_common_location}</p>
        </div>
      </div>
    </div>
  );
};

export default SummarySection;

// supabaseClient.ts

// utils/supabaseClient.ts

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function AcademiaCompensationPage() {
  return <DetailedCompensationView category="academia" />;
}

// page.tsx

import React from 'react';
import AggregatedCompensationView from '@/components/AggregatedCompensationView';

export default function AggregatedCompensationPage() {
  return <AggregatedCompensationView />;
}

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function HospitalCompensationPage() {
  return <DetailedCompensationView category="hospital" />;
}

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function PrivatePracticeCompensationPage() {
  return <DetailedCompensationView category="private_practice" />;
}

// page.tsx

import React from 'react';
import DetailedCompensationView from '@/components/DetailedCompensationView';

export default function ResearchCompensationPage() {
  return <DetailedCompensationView category="research" />;
}

// page.tsx

'use client';

import { 
  ShieldCheckIcon, 
  UserGroupIcon, 
  BuildingOffice2Icon,
  XCircleIcon,
  CheckCircleIcon,
} from '@heroicons/react/24/outline';
import { Formik, Form, Field } from 'formik';
import { useState } from 'react';
import * as Yup from 'yup';
import { supabase } from '../../../lib/supabaseClient';

const validationSchema = Yup.object({
  specialty: Yup.string().required('Required'),
  subspecialty: Yup.string(),
  position: Yup.string().required('Required'),
  category: Yup.string().required('Required'),
  baseSalary: Yup.number()
    .required('Required')
    .positive('Must be a positive number'),
  rvuCompensation: Yup.number()
    .min(0, 'Must be 0 or greater'),
  bonusCompensation: Yup.number()
    .min(0, 'Must be 0 or greater'),
  partnershipStake: Yup.number()
    .min(0, 'Must be 0 or greater'),
  location: Yup.string().required('Required'),
  yearsExperience: Yup.number()
    .required('Required')
    .min(0, 'Must be 0 or greater')
    .integer('Must be a whole number'),
  institution: Yup.string(),
  workHoursPerWeek: Yup.number()
    .min(0, 'Must be 0 or greater')
    .max(168, 'Must be less than 168'),
  callDaysPerMonth: Yup.number()
    .min(0, 'Must be 0 or greater')
    .max(31, 'Must be less than 31'),
});

export default function SubmitSalaryPage() {
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');

  const handleSubmit = async (values, { resetForm }) => {
    try {
      const { error } = await supabase.from('salaries').insert([{
        specialty: values.specialty,
        subspecialty: values.subspecialty,
        position: values.position,
        category: values.category,
        base_salary: values.baseSalary,
        rvu_compensation: values.rvuCompensation,
        bonus_compensation: values.bonusCompensation,
        partnership_stake: values.partnershipStake,
        location: values.location,
        years_experience: values.yearsExperience,
        institution: values.institution,
        work_hours_per_week: values.workHoursPerWeek,
        call_days_per_month: values.callDaysPerMonth,
        total_compensation: values.baseSalary + 
          (values.rvuCompensation || 0) + 
          (values.bonusCompensation || 0) + 
          (values.partnershipStake || 0),
      }]);

      if (error) throw error;
      setSubmitStatus('success');
      resetForm();
    } catch (error) {
      console.error('Error submitting salary:', error);
      setSubmitStatus('error');
    }
  };

  return (
<div className="relative isolate bg-white">
  <div className="mx-auto max-w-7xl px-6 lg:px-8">
    {/* Floating container with rounded corners */}
    <div className="mt-16 rounded-2xl border border-gray-100 bg-white shadow-sm">
      <div className="relative grid grid-cols-1 lg:grid-cols-2">
        {/* Left column */}
        <div className="relative lg:rounded-l-2xl overflow-hidden">
          {/* Pattern background - Now properly constrained */}
          <div className="absolute inset-0 bg-gray-50">
            <svg
              className="absolute inset-0 h-full w-full stroke-gray-200 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
              aria-hidden="true"
            >
              <defs>
                <pattern
                  id="83fd4e5a-9d52-42fc-97b6-718e5d7ee527"
                  width={200}
                  height={200}
                  x="100%"
                  y={-1}
                  patternUnits="userSpaceOnUse"
                >
                  <path d="M130 200V.5M.5 .5H200" fill="none" />
                </pattern>
              </defs>
              <rect width="100%" height="100%" strokeWidth={0} fill="white" />
              <svg x="100%" y={-1} className="overflow-visible fill-gray-50">
                <path d="M-470.5 0h201v201h-201Z" strokeWidth={0} />
              </svg>
              <rect width="100%" height="100%" strokeWidth={0} fill="url(#83fd4e5a-9d52-42fc-97b6-718e5d7ee527)" />
            </svg>
          </div>
          
          {/* Left column content */}
          <div className="relative px-6 pb-20 pt-24 sm:pt-24 lg:px-8 lg:py-32">
            <div className="mx-auto max-w-xl lg:mx-0 lg:max-w-lg">
              <h2 className="text-4xl font-semibold tracking-tight text-gray-900 sm:text-5xl">
                Share your salary
              </h2>
              <p className="mt-6 text-lg leading-8 text-gray-600">
                Your contribution matters more than you know. By sharing your compensation details, 
                you're helping fellow medical professionals make informed career decisions and 
                fostering a culture of transparency in healthcare.
              </p>
              <dl className="mt-10 space-y-4 text-base leading-7 text-gray-600">
                <div className="flex gap-x-4">
                  <dt className="flex-none">
                    <span className="sr-only">Privacy</span>
                    <ShieldCheckIcon className="h-7 w-6 text-blue-600" />
                  </dt>
                  <dd>Private and Secure submissions</dd>
                </div>
                <div className="flex gap-x-4">
                  <dt className="flex-none">
                    <span className="sr-only">Community</span>
                    <UserGroupIcon className="h-7 w-6 text-blue-600" />
                  </dt>
                  <dd>Help break salary secrecy</dd>
                </div>
                <div className="flex gap-x-4">
                  <dt className="flex-none">
                    <span className="sr-only">Impact</span>
                    <BuildingOffice2Icon className="h-7 w-6 text-blue-600" />
                  </dt>
                  <dd>Shape the future of medical compensations</dd>
                </div>
              </dl>
            </div>
          </div>
        </div>

        {/* Right column - Form */}
        <div className="relative px-6 pb-24 pt-20 sm:pb-24 lg:px-8 lg:py-32">
          <div className="mx-auto max-w-xl lg:mr-0 lg:max-w-lg">
          <Formik
          initialValues={{
            specialty: '',
            subspecialty: '',
            position: '',
            category: '',
            baseSalary: '',
            rvuCompensation: '',
            bonusCompensation: '',
            partnershipStake: '',
            location: '',
            yearsExperience: '',
            institution: '',
            workHoursPerWeek: '',
            callDaysPerMonth: '',
          }}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
        >
              {({ isSubmitting, errors, touched }) => (
                <Form className="space-y-6">
                 <div className="mx-auto max-w-xl lg:mr-0 lg:max-w-lg">
                <div className="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
                  <div className="">
                    <label htmlFor="specialty" className="block text-sm font-semibold leading-6 text-gray-900">
                      Specialty
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="text"
                        name="specialty"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                      {errors.specialty && touched.specialty && (
                        <div className="text-red-500 text-sm mt-1">{errors.specialty}</div>
                      )}
                    </div>
                  </div>

                  <div className="">
                    <label htmlFor="subspecialty" className="block text-sm font-semibold leading-6 text-gray-900">
                      Subspecialty (optional)
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="text"
                        name="subspecialty"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                    </div>
                  </div>

                  <div className="sm:col-span-2">
                    <label htmlFor="category" className="block text-sm font-semibold leading-6 text-gray-900">
                      Position
                    </label>
                    <div className="mt-2.5">
                      <Field
                        as="select"
                        name="category"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      >
                        <option value="">Select a category</option>
                        <option value="academia">Academia</option>
                        <option value="hospital">Hospital</option>
                        <option value="private_practice">Private Practice</option>
                        <option value="research">Research</option>
                      </Field>
                      {errors.category && touched.category && (
                        <div className="text-red-500 text-sm mt-1">{errors.category}</div>
                      )}
                    </div>
                  </div>

                  <div>
                    <label htmlFor="baseSalary" className="block text-sm font-semibold leading-6 text-gray-900">
                      Base Salary ($)
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="number"
                        name="baseSalary"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                      {errors.baseSalary && touched.baseSalary && (
                        <div className="text-red-500 text-sm mt-1">{errors.baseSalary}</div>
                      )}
                    </div>
                  </div>

                  <div>
                    <label htmlFor="rvuCompensation" className="block text-sm font-semibold leading-6 text-gray-900">
                      RVU Compensation ($)
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="number"
                        name="rvuCompensation"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                    </div>
                  </div>

                  <div>
                    <label htmlFor="bonusCompensation" className="block text-sm font-semibold leading-6 text-gray-900">
                      Bonus ($)
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="number"
                        name="bonusCompensation"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                    </div>
                  </div>

                  <div>
                    <label htmlFor="partnershipStake" className="block text-sm font-semibold leading-6 text-gray-900">
                      Partnership Income ($)
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="number"
                        name="partnershipStake"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                    </div>
                  </div>

                  <div className="sm:col-span-2">
                    <label htmlFor="location" className="block text-sm font-semibold leading-6 text-gray-900">
                      Location
                    </label>
                    <div className="mt-2.5">
                      <Field
                        type="text"
                        name="location"
                        className="block w-full rounded-md border-0 px-3.5 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                      />
                      {errors.location && touched.location && (
                        <div className="text-red-500 text-sm mt-1">{errors.location}</div>
                      )}
                    </div>
                  </div>
                </div>

                <div className="mt-8">
                  {submitStatus === 'success' && (
                    <div className="mb-4 rounded-md bg-green-50 p-4">
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <CheckCircleIcon className="h-5 w-5 text-green-400" aria-hidden="true" />
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-medium text-green-800">Submission Successful</h3>
                          <div className="mt-2 text-sm text-green-700">
                            <p>Thank you for contributing to salary transparency in healthcare!</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  {submitStatus === 'error' && (
                    <div className="mb-4 rounded-md bg-red-50 p-4">
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <XCircleIcon className="h-5 w-5 text-red-400" aria-hidden="true" />
                        </div>
                        <div className="ml-3">
                          <h3 className="text-sm font-medium text-red-800">Submission Failed</h3>
                          <div className="mt-2 text-sm text-red-700">
                            <p>Please try again later. If the problem persists, contact support.</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="flex justify-end">
                    <button
                      type="submit"
                      disabled={isSubmitting}
                      className={`rounded-md px-6 py-3 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600
                        ${isSubmitting 
                          ? 'bg-blue-400 cursor-not-allowed' 
                          : 'bg-blue-600 hover:bg-blue-500'
                        }`}
                    >
                      {isSubmitting ? (
                        <div className="flex items-center">
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Submitting...
                        </div>
                      ) : 'Submit Salary Information'}
                    </button>
                  </div>

                  <div className="mt-4 text-center text-sm text-gray-500">
                    By submitting, you agree that the information provided is accurate 
                    and can be shared anonymously on our platform.
                  </div>
                </div>
              </div>
                </Form>
              )}
            </Formik>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
  );
}

// globals.css

/* app/globals.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom Global Styles */
body {
  @apply font-sans;
}

.test {
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center center;
    background-repeat: repeat;
    background-image: url("data:image/svg+xml;utf8,%3Csvg viewBox=%220 0 2000 1400%22 xmlns=%22http:%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cmask id=%22b%22 x=%220%22 y=%220%22 width=%222000%22 height=%221400%22%3E%3Cpath fill=%22url(%23a)%22 d=%22M0 0h2000v1400H0z%22%2F%3E%3C%2Fmask%3E%3Cpath fill=%22%23fff%22 d=%22M0 0h2000v1400H0z%22%2F%3E%3Cg style=%22transform-origin:center center%22 stroke=%22%23dedede%22 stroke-width=%22.4%22 fill=%22none%22 mask=%22url(%23b)%22%3E%3Cpath d=%22M0 0h153.846v153.846H0zM153.846 0h153.846v153.846H153.846zM307.692 0h153.846v153.846H307.692zM461.538 0h153.846v153.846H461.538zM615.385 0h153.846v153.846H615.385zM769.231 0h153.846v153.846H769.231zM923.077 0h153.846v153.846H923.077zM1076.923 0h153.846v153.846h-153.846zM1230.769 0h153.846v153.846h-153.846zM1384.615 0h153.846v153.846h-153.846zM1538.462 0h153.846v153.846h-153.846zM1692.308 0h153.846v153.846h-153.846zM1846.154 0H2000v153.846h-153.846zM0 153.846h153.846v153.846H0zM153.846 153.846h153.846v153.846H153.846zM307.692 153.846h153.846v153.846H307.692zM461.538 153.846h153.846v153.846H461.538zM615.385 153.846h153.846v153.846H615.385zM769.231 153.846h153.846v153.846H769.231zM923.077 153.846h153.846v153.846H923.077zM1076.923 153.846h153.846v153.846h-153.846zM1230.769 153.846h153.846v153.846h-153.846zM1384.615 153.846h153.846v153.846h-153.846zM1538.462 153.846h153.846v153.846h-153.846zM1692.308 153.846h153.846v153.846h-153.846zM1846.154 153.846H2000v153.846h-153.846zM0 307.692h153.846v153.846H0zM153.846 307.692h153.846v153.846H153.846zM307.692 307.692h153.846v153.846H307.692zM461.538 307.692h153.846v153.846H461.538zM615.385 307.692h153.846v153.846H615.385zM769.231 307.692h153.846v153.846H769.231zM923.077 307.692h153.846v153.846H923.077zM1076.923 307.692h153.846v153.846h-153.846zM1230.769 307.692h153.846v153.846h-153.846zM1384.615 307.692h153.846v153.846h-153.846zM1538.462 307.692h153.846v153.846h-153.846zM1692.308 307.692h153.846v153.846h-153.846zM1846.154 307.692H2000v153.846h-153.846zM0 461.538h153.846v153.846H0zM153.846 461.538h153.846v153.846H153.846zM307.692 461.538h153.846v153.846H307.692zM461.538 461.538h153.846v153.846H461.538zM615.385 461.538h153.846v153.846H615.385zM769.231 461.538h153.846v153.846H769.231zM923.077 461.538h153.846v153.846H923.077zM1076.923 461.538h153.846v153.846h-153.846zM1230.769 461.538h153.846v153.846h-153.846zM1384.615 461.538h153.846v153.846h-153.846zM1538.462 461.538h153.846v153.846h-153.846zM1692.308 461.538h153.846v153.846h-153.846zM1846.154 461.538H2000v153.846h-153.846zM0 615.385h153.846v153.846H0zM153.846 615.385h153.846v153.846H153.846zM307.692 615.385h153.846v153.846H307.692zM461.538 615.385h153.846v153.846H461.538zM615.385 615.385h153.846v153.846H615.385zM769.231 615.385h153.846v153.846H769.231zM923.077 615.385h153.846v153.846H923.077zM1076.923 615.385h153.846v153.846h-153.846zM1230.769 615.385h153.846v153.846h-153.846zM1384.615 615.385h153.846v153.846h-153.846zM1538.462 615.385h153.846v153.846h-153.846zM1692.308 615.385h153.846v153.846h-153.846zM1846.154 615.385H2000v153.846h-153.846zM0 769.231h153.846v153.846H0zM153.846 769.231h153.846v153.846H153.846zM307.692 769.231h153.846v153.846H307.692zM461.538 769.231h153.846v153.846H461.538zM615.385 769.231h153.846v153.846H615.385zM769.231 769.231h153.846v153.846H769.231zM923.077 769.231h153.846v153.846H923.077zM1076.923 769.231h153.846v153.846h-153.846zM1230.769 769.231h153.846v153.846h-153.846zM1384.615 769.231h153.846v153.846h-153.846zM1538.462 769.231h153.846v153.846h-153.846zM1692.308 769.231h153.846v153.846h-153.846zM1846.154 769.231H2000v153.846h-153.846zM0 923.077h153.846v153.846H0zM153.846 923.077h153.846v153.846H153.846zM307.692 923.077h153.846v153.846H307.692zM461.538 923.077h153.846v153.846H461.538zM615.385 923.077h153.846v153.846H615.385zM769.231 923.077h153.846v153.846H769.231zM923.077 923.077h153.846v153.846H923.077zM1076.923 923.077h153.846v153.846h-153.846zM1230.769 923.077h153.846v153.846h-153.846zM1384.615 923.077h153.846v153.846h-153.846zM1538.462 923.077h153.846v153.846h-153.846zM1692.308 923.077h153.846v153.846h-153.846zM1846.154 923.077H2000v153.846h-153.846zM0 1076.923h153.846v153.846H0zM153.846 1076.923h153.846v153.846H153.846zM307.692 1076.923h153.846v153.846H307.692zM461.538 1076.923h153.846v153.846H461.538zM615.385 1076.923h153.846v153.846H615.385zM769.231 1076.923h153.846v153.846H769.231zM923.077 1076.923h153.846v153.846H923.077zM1076.923 1076.923h153.846v153.846h-153.846zM1230.769 1076.923h153.846v153.846h-153.846zM1384.615 1076.923h153.846v153.846h-153.846zM1538.462 1076.923h153.846v153.846h-153.846zM1692.308 1076.923h153.846v153.846h-153.846zM1846.154 1076.923H2000v153.846h-153.846zM0 1230.769h153.846v153.846H0zM153.846 1230.769h153.846v153.846H153.846zM307.692 1230.769h153.846v153.846H307.692zM461.538 1230.769h153.846v153.846H461.538zM615.385 1230.769h153.846v153.846H615.385zM769.231 1230.769h153.846v153.846H769.231zM923.077 1230.769h153.846v153.846H923.077zM1076.923 1230.769h153.846v153.846h-153.846zM1230.769 1230.769h153.846v153.846h-153.846zM1384.615 1230.769h153.846v153.846h-153.846zM1538.462 1230.769h153.846v153.846h-153.846zM1692.308 1230.769h153.846v153.846h-153.846zM1846.154 1230.769H2000v153.846h-153.846zM0 1384.615h153.846v153.846H0zM153.846 1384.615h153.846v153.846H153.846zM307.692 1384.615h153.846v153.846H307.692zM461.538 1384.615h153.846v153.846H461.538zM615.385 1384.615h153.846v153.846H615.385zM769.231 1384.615h153.846v153.846H769.231zM923.077 1384.615h153.846v153.846H923.077zM1076.923 1384.615h153.846v153.846h-153.846zM1230.769 1384.615h153.846v153.846h-153.846zM1384.615 1384.615h153.846v153.846h-153.846zM1538.462 1384.615h153.846v153.846h-153.846zM1692.308 1384.615h153.846v153.846h-153.846zM1846.154 1384.615H2000v153.846h-153.846z%22%2F%3E%3C%2Fg%3E%3Cdefs%3E%3CradialGradient id=%22a%22%3E%3Cstop offset=%220%22 stop-color=%22%23fff%22 stop-opacity=%22.784%22%2F%3E%3Cstop offset=%2282%25%22 stop-color=%22%23fff%22 stop-opacity=%220%22%2F%3E%3C%2FradialGradient%3E%3C%2Fdefs%3E%3C%2Fsvg%3E");
}

// layout.tsx

// app/layout.tsx

import './globals.css';
import { Inter } from 'next/font/google';
import NavBar from './NavBar';
import Footer from '@/components/Footer';

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
});

export const metadata = {
  title: 'Medical Levels',
  description: 'Bringing transparency to medical salaries.',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.variable}>
      <body>

          <NavBar />
          <main className="container mx-auto px-4 max-w-6xl"> {children} </main>
          <Footer />
      </body>
    </html>
  );
}


// NavBar.tsx

'use client'

import { useState, useRef, useEffect } from 'react'
import Link from 'next/link'
import {
  Dialog,
  DialogPanel,
  Disclosure,
  DisclosureButton,
  DisclosurePanel,
  Popover,
  PopoverButton,
  PopoverPanel,
  useClose
} from '@headlessui/react'
import {
  Bars3Icon,
  XMarkIcon,
} from '@heroicons/react/24/outline'
import { ChevronDownIcon } from '@heroicons/react/20/solid'
import { 
  Heart,
  Brain,
  Stethoscope,
  Bone,
  Baby,
  Scissors,
  FlaskConical,
  Pill,
  Radio,
  Eye,
  Syringe,
  HandCoins,
  Banknote
} from 'lucide-react'

const specialties = [
  { name: 'Cardiology', href: '/compensation/aggregated?specialty=cardiology', icon: Heart },
  { name: 'Neurology', href: '/compensation/aggregated?specialty=neurology', icon: Brain },
  { name: 'Internal Medicine', href: '/compensation/aggregated?specialty=internal-medicine', icon: Stethoscope },
  { name: 'Orthopedics', href: '/compensation/aggregated?specialty=orthopedics', icon: Bone },
  { name: 'Pediatrics', href: '/compensation/aggregated?specialty=pediatrics', icon: Baby },
  { name: 'Surgery', href: '/compensation/aggregated?specialty=surgery', icon: Scissors },
  { name: 'Pathology', href: '/compensation/aggregated?specialty=pathology', icon: FlaskConical },
  { name: 'Family Medicine', href: '/compensation/aggregated?specialty=family-medicine', icon: Pill },
  { name: 'Radiology', href: '/compensation/aggregated?specialty=radiology', icon: Radio },
  { name: 'Ophthalmology', href: '/compensation/aggregated?specialty=ophthalmology', icon: Eye },
  { name: 'Anesthesiology', href: '/compensation/aggregated?specialty=anesthesiology', icon: Syringe },
]

const callsToAction = [
  { name: 'Add Salary', href: '/submit', icon: HandCoins },
  { name: 'View Salaries', href: '/compensation/aggregated', icon: Banknote },
]

const SpecialtiesPopover = () => {
  const [isOpen, setIsOpen] = useState(false)
  const timeoutRef = useRef(null)
  const popoverRef = useRef(null)

  const handleMouseEnter = () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current)
    setIsOpen(true)
  }

  const handleMouseLeave = () => {
    timeoutRef.current = setTimeout(() => {
      setIsOpen(false)
    }, 100) // Small delay to allow moving to popover panel
  }

  useEffect(() => {
    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current)
    }
  }, [])

  const splitSpecialties = () => {
    const itemsPerColumn = Math.ceil(specialties.length / 3)
    return [
      specialties.slice(0, itemsPerColumn),
      specialties.slice(itemsPerColumn, itemsPerColumn * 2),
      specialties.slice(itemsPerColumn * 2)
    ]
  }

  const columns = splitSpecialties()

  return (
    <Popover className="relative" ref={popoverRef}>
      <PopoverButton
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        className="group inline-flex items-center gap-x-1 text-sm font-semibold leading-6 text-gray-900 hover:text-vibrant-teal focus:outline-none"
      >
        <span>Specialties</span>
        <ChevronDownIcon
          className={`h-5 w-5 flex-none text-gray-400 transition-transform duration-200 ${
            isOpen ? 'rotate-180' : ''
          }`}
          aria-hidden="true"
        />
      </PopoverButton>

      {isOpen && (
        <PopoverPanel
          static
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          className="absolute left-0 top-full z-10 mt-3 w-screen max-w-4xl overflow-hidden rounded-3xl bg-white shadow-lg ring-1 ring-gray-900/5"
        >
          <div className="p-8">
            <div className="grid grid-cols-3 gap-x-8">
              {columns.map((column, columnIndex) => (
                <div key={columnIndex} className="space-y-4">
                  {column.map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      className="group flex items-center gap-x-4 rounded-lg p-4 text-sm leading-6 hover:bg-gray-50 transition duration-150"
                      onClick={() => setIsOpen(false)}
                    >
                      <div className="flex h-11 w-11 flex-none items-center justify-center rounded-lg bg-gray-50/75 group-hover:bg-white group-hover:shadow-sm">
                        <item.icon className="h-6 w-6 text-gray-600 group-hover:text-vibrant-teal transition-colors" />
                      </div>
                      <div className="flex-auto">
                        <span className="text-sm font-semibold text-gray-900 group-hover:text-vibrant-teal transition-colors">
                          {item.name}
                        </span>
                      </div>
                    </Link>
                  ))}
                </div>
              ))}
            </div>
          </div>
          
          <div className="bg-gray-50">
            <div className="grid grid-cols-2 divide-x divide-gray-900/5">
              {callsToAction.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="flex items-center justify-center gap-x-2.5 p-4 text-sm font-semibold leading-6 text-gray-900 hover:bg-gray-100 transition duration-150"
                  onClick={() => setIsOpen(false)}
                >
                  <item.icon className="h-5 w-5 flex-none text-gray-400" aria-hidden="true" />
                  {item.name}
                </Link>
              ))}
            </div>
          </div>
        </PopoverPanel>
      )}
    </Popover>
  )
}

export default function NavBar() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)

  return (
    <header className="bg-white max-w-6xl mx-auto">
      <nav className="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8">
        <div className="flex lg:flex-1">
          <Link href="/" className="flex items-center">
            <span className="sr-only">ClearMD</span>
            <img
              className="h-8 w-auto"
              src="/logo-large.png"
              alt="ClearMD Logo"
            />
          </Link>
          <div className="hidden lg:ml-8 lg:flex lg:gap-x-8">
            <SpecialtiesPopover />
          </div>
        </div>

        <div className="flex lg:hidden">
          <button
            type="button"
            onClick={() => setMobileMenuOpen(true)}
            className="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700"
          >
            <span className="sr-only">Open main menu</span>
            <Bars3Icon className="h-6 w-6" aria-hidden="true" />
          </button>
        </div>

        <div className="hidden lg:flex lg:flex-1 lg:justify-end">
          <Link
            href="/submit"
            className="text-sm font-semibold leading-6 text-gray-900 hover:text-vibrant-teal transition-colors"
          >
            Add Salary <span aria-hidden="true">→</span>
          </Link>
        </div>
      </nav>
      
      {/* Mobile menu - keeping your existing implementation */}
      <Dialog as="div" className="lg:hidden" open={mobileMenuOpen} onClose={setMobileMenuOpen}>
        <div className="fixed inset-0 z-10" />
        <DialogPanel className="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
          <div className="flex items-center justify-between">
            <Link href="/" className="-m-1.5 p-1.5">
              <span className="sr-only">ClearMD</span>
              <img
                className="h-8 w-auto"
                src="/logo-large.png"
                alt="ClearMD Logo"
              />
            </Link>
            <button
              type="button"
              onClick={() => setMobileMenuOpen(false)}
              className="-m-2.5 rounded-md p-2.5 text-gray-700"
            >
              <span className="sr-only">Close menu</span>
              <XMarkIcon className="h-6 w-6" aria-hidden="true" />
            </button>
          </div>
          <div className="mt-6 flow-root">
            <div className="-my-6 divide-y divide-gray-500/10">
              <div className="space-y-2 py-6">
                <Disclosure as="div" className="-mx-3">
                  <DisclosureButton className="group flex w-full items-center justify-between rounded-lg py-2 pl-3 pr-3.5 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50">
                    Specialties
                    <ChevronDownIcon className="h-5 w-5 flex-none group-data-[open]:rotate-180" aria-hidden="true" />
                  </DisclosureButton>
                  <DisclosurePanel className="mt-2 space-y-2">
                    {[...specialties, ...callsToAction].map((item) => (
                      <Link
                        key={item.name}
                        href={item.href}
                        className="flex items-center gap-x-3 rounded-lg py-2 pl-6 pr-3 text-sm font-semibold leading-7 text-gray-900 hover:bg-gray-50"
                        onClick={() => setMobileMenuOpen(false)}
                      >
                        <item.icon className="h-5 w-5 flex-none text-gray-400" aria-hidden="true" />
                        {item.name}
                      </Link>
                    ))}
                  </DisclosurePanel>
                </Disclosure>
              </div>
              <div className="py-6">
                <Link
                  href="/submit"
                  className="-mx-3 block rounded-lg px-3 py-2.5 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  Add Salary
                </Link>
              </div>
            </div>
          </div>
        </DialogPanel>
      </Dialog>
    </header>
  )
}

// page.tsx

'use client'

import { useState, useEffect } from 'react';
import MainHeroSection from '@/components/MainHeroSection';
import SalaryComparison from '@/components/SalaryComparison';
import CallToAction from '@/components/CallToAction';
import { supabase } from '../../lib/supabaseClient';

export default function HomePage() {
  const [selectedSpecialty, setSelectedSpecialty] = useState('');
  const [selectedSubspecialty, setSelectedSubspecialty] = useState('');
  const [specialties, setSpecialties] = useState<string[]>([]);
  const [subspecialties, setSubspecialties] = useState<string[]>([]);
  const [stats, setStats] = useState({
    averageSalary: '$0',
    topLocation: '-',
    popularSubspecialty: '-',
    dataPoints: '0',
  });

  useEffect(() => {
    fetchSpecialties();
  }, []);

  useEffect(() => {
    if (selectedSpecialty) {
      fetchSubspecialties(selectedSpecialty);
      fetchStats(selectedSpecialty, selectedSubspecialty);
    }
  }, [selectedSpecialty, selectedSubspecialty]);

  const fetchSpecialties = async () => {
    const { data, error } = await supabase
      .from('salaries')
      .select('specialty')
      .not('specialty', 'is', null);
    
    if (error) {
      console.error('Error fetching specialties:', error);
    } else {
      const uniqueSpecialties = [...new Set(data.map(item => item.specialty))].sort();
      setSpecialties(uniqueSpecialties);
    }
  };

  const fetchSubspecialties = async (specialty: string) => {
    const { data, error } = await supabase
      .from('salaries')
      .select('subspecialty')
      .eq('specialty', specialty)
      .not('subspecialty', 'is', null);
    
    if (error) {
      console.error('Error fetching subspecialties:', error);
    } else {
      const uniqueSubspecialties = [...new Set(data.map(item => item.subspecialty))].sort();
      setSubspecialties(uniqueSubspecialties);
    }
  };

  const fetchStats = async (specialty: string, subspecialty: string | null) => {
    let query = supabase
      .from('salaries')
      .select('*')
      .eq('specialty', specialty);

    if (subspecialty) {
      query = query.eq('subspecialty', subspecialty);
    }

    const { data, error } = await query;

    if (error) {
      console.error('Error fetching stats:', error);
    } else {
      // Calculate stats
      const averageSalary = data.reduce((sum, item) => sum + item.salary, 0) / data.length;
      
      const locationCounts = data.reduce((acc, item) => {
        acc[item.location] = (acc[item.location] || 0) + 1;
        return acc;
      }, {});
      
      const topLocation = Object.entries(locationCounts)
        .sort(([,a], [,b]) => b - a)[0]?.[0] || '-';

      const subspecialtyCounts = data.reduce((acc, item) => {
        if (item.subspecialty) {
          acc[item.subspecialty] = (acc[item.subspecialty] || 0) + 1;
        }
        return acc;
      }, {});

      const popularSubspecialty = Object.entries(subspecialtyCounts)
        .sort(([,a], [,b]) => b - a)[0]?.[0] || '-';

      setStats({
        averageSalary: `$${Math.round(averageSalary).toLocaleString()}`,
        topLocation,
        popularSubspecialty,
        dataPoints: data.length.toString(),
      });
    }
  };

  return (
    <div className="min-h-screen bg-soft-gray">
      <MainHeroSection
        specialties={specialties}
        subspecialties={subspecialties}
        selectedSpecialty={selectedSpecialty}
        selectedSubspecialty={selectedSubspecialty}
        onSpecialtyChange={setSelectedSpecialty}
        onSubspecialtyChange={setSelectedSubspecialty}
        stats={stats}
      />
      <SalaryComparison
        selectedSpecialty={selectedSpecialty}
        selectedSubspecialty={selectedSubspecialty}
      />
      <CallToAction />
    </div>
  );
}

// package.json

{
  "name": "clearmd",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.1.8",
    "@heroicons/react": "^2.1.5",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.45.4",
    "@tailwindcss/forms": "^0.5.9",
    "algoliasearch": "^4.24.0",
    "formik": "^2.4.6",
    "framer-motion": "^11.11.9",
    "lucide-react": "^0.453.0",
    "next": "14.2.13",
    "react": "^18",
    "react-dom": "^18",
    "react-instantsearch-hooks-web": "^6.47.3",
    "react-spring": "^9.7.4",
    "react-table": "^7.8.0",
    "recharts": "^2.12.7",
    "yup": "^1.4.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.2.13",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "typescript": "^5"
  }
}


// postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


// tsconfig.json

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "es2015",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./components/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


// tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        'deep-blue': '#1E3A8A',
        'vibrant-teal': '#14B8A6',
        'soft-gray': '#F3F4F6',
        'slate-gray': '#6B7280',
        'accent-orange': '#F97316',
      },
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
        mono: ['var(--font-geist-mono)'],
      },
      borderRadius: {
        DEFAULT: '8px',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}

